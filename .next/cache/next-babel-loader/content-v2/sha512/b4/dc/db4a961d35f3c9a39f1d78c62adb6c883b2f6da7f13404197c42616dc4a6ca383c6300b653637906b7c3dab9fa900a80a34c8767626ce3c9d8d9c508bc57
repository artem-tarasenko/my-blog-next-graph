{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\tarasenko_ag\\\\Desktop\\\\blog\\\\MyBlog\\\\frontNextJs\\\\pages\\\\index.js\";\nimport React, { useEffect, useState } from \"react\"; //import '../styles/globals.css';\n\nimport Blog from \"../components/Blog.jsx\";\nimport Layout from '../components/Layout.jsx'; // import { request, GraphQLClient, gql  } from 'graphql-request';\n\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\n\nfunction Index(props) {\n  //get props from getStaticProps and destructure it to new object\n  //recieveing posts prop = [\"array from response\"], and default empty []\n  const {\n    posts = []\n  } = props; //console.log(\"INITIAL POSTS > \", posts);\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Layout, {\n      children: props.posts.length > 1 ? /*#__PURE__*/_jsxDEV(Blog, {\n        source: posts,\n        test: \"testing string\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 47\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 97\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 13\n  }, this);\n} // ###############################################################\n// ###############################################################\n// ###############################################################\n// ###############################################################\n// This function gets called at build time\n\n\nexport async function getStaticProps() {\n  const client = new ApolloClient({\n    uri: process.env.REACT_APP_GRAPH_API,\n    cache: new InMemoryCache()\n  }); //destructure response to data obj\n\n  const {\n    data\n  } = await client.query({\n    query: gql`{ \n            posts {\n                id\n                tags\n                title\n                slug\n                coverImage {\n                  url\n                }\n                excerpt\n                date\n              } \n        }`\n  });\n  const postsData = await client.query({\n    query: gql`{posts { slug } }`\n  });\n  const postsSlugs = postsData.data.posts;\n  const paths = postsSlugs.map(slug => ({\n    params: {\n      slug\n    }\n  }));\n  console.log(\"Posts Data - \", postsData);\n  console.log(\"Posts Slugs - \", postsSlugs);\n  console.log(\"Paths return - \", paths); //   const posts2 = await client.query({\n  //     query: gql`\n  //     { \n  //       posts {\n  //           slug\n  //         }\n  //     }\n  //   `\n  //   });\n  //   const postsSlugs = posts2.data.posts;\n  //   const paths = postsSlugs.map(itemSlug => ({slug: itemSlug.slug}));\n  //   console.log(\"POSTS SLUGS VAR > \", postsSlugs);\n  //   console.log(\"PATHS VAR > \", paths);\n  //   console.log(\"PATHS VAR #0 > \", paths[0]);\n  //check what we got from API in console (server-side render fetching)\n  //response would be - posts []\n  //console.log(\"QUERY DATA, \", data); \n  //return props to main component as an object {posts: response.posts}\n\n  return {\n    props: {\n      posts: data.posts\n    }\n  };\n}\nexport default Index;","map":{"version":3,"sources":["C:/Users/tarasenko_ag/Desktop/blog/MyBlog/frontNextJs/pages/index.js"],"names":["React","useEffect","useState","Blog","Layout","ApolloClient","InMemoryCache","gql","Index","props","posts","length","getStaticProps","client","uri","process","env","REACT_APP_GRAPH_API","cache","data","query","postsData","postsSlugs","paths","map","slug","params","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;;AAEA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,MAAP,MAAmB,0BAAnB,C,CACA;;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,GAAtC,QAAiD,gBAAjD;;AAIA,SAASC,KAAT,CAAgBC,KAAhB,EAAwB;AACpB;AACA;AACA,QAAM;AAAEC,IAAAA,KAAK,GAAG;AAAV,MAAiBD,KAAvB,CAHoB,CAIpB;;AAEA,sBAAQ,QAAC,KAAD,CAAO,QAAP;AAAA,2BACI,QAAC,MAAD;AAAA,gBACKA,KAAK,CAACC,KAAN,CAAYC,MAAZ,GAAqB,CAArB,gBAAyB,QAAC,IAAD;AAAM,QAAA,MAAM,EAAED,KAAd;AAAqB,QAAA,IAAI,EAAE;AAA3B;AAAA;AAAA;AAAA;AAAA,cAAzB,gBAA2E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADhF;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UAAR;AAKH,C,CAGD;AACA;AAEA;AACA;AAGA;;;AACA,OAAO,eAAeE,cAAf,GAAgC;AAEnC,QAAMC,MAAM,GAAG,IAAIR,YAAJ,CAAiB;AAC5BS,IAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,mBADW;AAE5BC,IAAAA,KAAK,EAAE,IAAIZ,aAAJ;AAFqB,GAAjB,CAAf,CAFmC,CAOnC;;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAW,MAAMN,MAAM,CAACO,KAAP,CAAa;AAChCA,IAAAA,KAAK,EAAEb,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbwC,GAAb,CAAvB;AAkBE,QAAMc,SAAS,GAAG,MAAMR,MAAM,CAACO,KAAP,CAAa;AACnCA,IAAAA,KAAK,EAAEb,GAAI;AADwB,GAAb,CAAxB;AAKA,QAAMe,UAAU,GAAGD,SAAS,CAACF,IAAV,CAAeT,KAAlC;AACA,QAAMa,KAAK,GAAGD,UAAU,CAACE,GAAX,CAAeC,IAAI,KAAK;AAACC,IAAAA,MAAM,EAAE;AAACD,MAAAA;AAAD;AAAT,GAAL,CAAnB,CAAd;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BP,SAA7B;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BN,UAA9B;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BL,KAA/B,EApCiC,CAsCnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAEA;;AACA,SAAO;AAAEd,IAAAA,KAAK,EAAE;AAACC,MAAAA,KAAK,EAAES,IAAI,CAACT;AAAb;AAAT,GAAP;AACD;AAEH,eAAeF,KAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n//import '../styles/globals.css';\r\n\r\nimport Blog from \"../components/Blog.jsx\";\r\nimport Layout from '../components/Layout.jsx';\r\n// import { request, GraphQLClient, gql  } from 'graphql-request';\r\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\r\n\r\n\r\n\r\nfunction Index( props ) {\r\n    //get props from getStaticProps and destructure it to new object\r\n    //recieveing posts prop = [\"array from response\"], and default empty []\r\n    const { posts = [] } = props;\r\n    //console.log(\"INITIAL POSTS > \", posts);\r\n    \r\n    return  <React.Fragment>\r\n                <Layout >\r\n                    {props.posts.length > 1 ? <Blog source={posts} test={\"testing string\"} /> : <p>Loading...</p>}\r\n                </Layout>\r\n            </React.Fragment>\r\n}\r\n\r\n\r\n// ###############################################################\r\n// ###############################################################\r\n\r\n// ###############################################################\r\n// ###############################################################\r\n\r\n\r\n// This function gets called at build time\r\nexport async function getStaticProps() {\r\n\r\n    const client = new ApolloClient({\r\n        uri: process.env.REACT_APP_GRAPH_API,\r\n        cache: new InMemoryCache()\r\n    });\r\n\r\n    //destructure response to data obj\r\n    const { data } = await client.query({\r\n        query: gql`{ \r\n            posts {\r\n                id\r\n                tags\r\n                title\r\n                slug\r\n                coverImage {\r\n                  url\r\n                }\r\n                excerpt\r\n                date\r\n              } \r\n        }`\r\n    });\r\n\r\n\r\n    \r\n      const postsData = await client.query({\r\n        query: gql`{posts { slug } }`\r\n      });\r\n    \r\n    \r\n      const postsSlugs = postsData.data.posts;\r\n      const paths = postsSlugs.map(slug => ({params: {slug}}));\r\n\r\n      console.log(\"Posts Data - \", postsData);\r\n      console.log(\"Posts Slugs - \", postsSlugs);\r\n      console.log(\"Paths return - \", paths);\r\n\r\n    //   const posts2 = await client.query({\r\n    //     query: gql`\r\n    //     { \r\n    //       posts {\r\n    //           slug\r\n    //         }\r\n    //     }\r\n    //   `\r\n    //   });\r\n    \r\n    \r\n    //   const postsSlugs = posts2.data.posts;\r\n    //   const paths = postsSlugs.map(itemSlug => ({slug: itemSlug.slug}));\r\n    \r\n    //   console.log(\"POSTS SLUGS VAR > \", postsSlugs);\r\n    //   console.log(\"PATHS VAR > \", paths);\r\n    //   console.log(\"PATHS VAR #0 > \", paths[0]);\r\n\r\n\r\n\r\n    //check what we got from API in console (server-side render fetching)\r\n    //response would be - posts []\r\n    //console.log(\"QUERY DATA, \", data); \r\n    \r\n    //return props to main component as an object {posts: response.posts}\r\n    return { props: {posts: data.posts} }\r\n  }\r\n\r\nexport default Index;\r\n\r\n"]},"metadata":{},"sourceType":"module"}