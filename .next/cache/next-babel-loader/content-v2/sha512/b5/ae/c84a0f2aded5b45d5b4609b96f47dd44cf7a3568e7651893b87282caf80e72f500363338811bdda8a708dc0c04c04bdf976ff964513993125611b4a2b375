{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\nimport BlogPost from \"../../components/BlogPost.jsx\";\nimport Blog from \"../../components/blog.jsx\"; // #########################################################################################\n// #########################################################################################\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_GRAPH_API,\n  cache: new InMemoryCache()\n}); // #########################################################################################\n// #########################################################################################\n\nexport async function getStaticProps({\n  params\n}) {\n  //destructure response to data obj, response data from apollo will be in data prop.\n  //so destructuring should be for 2 layers\n  //GraphQL query format - ( { query: *query*, variables: {} } ). Response will be if a form of - {data: {posts: [{post}, {post}]}}\n  //but with only 1 item in the array - {data: {posts: [{post}]}}, so to get the final object 3 layers must be destructured..\n  const graphQuery = gql`\n    query GetSinglePostQuery($slug: String) { \n      posts(where: {slug: $slug}) {\n        slug\n        title\n        date\n        excerpt\n        content {\n          text\n          raw\n          markdown\n          html\n        }\n          coverImage {\n            url\n          }\n      }\n    } \n  `;\n  const {\n    data: {\n      posts: [post]\n    }\n  } = await client.query({\n    query: graphQuery,\n    variables: {\n      slug: params.slug\n    }\n  });\n  return {\n    props: {\n      post\n    }\n  };\n} // #########################################################################################\n// #########################################################################################\n// This function gets called at build time\n\nexport async function getStaticPaths() {\n  const {\n    data: {\n      posts\n    }\n  } = await client.query({\n    query: gql`{posts { slug } }`\n  });\n  const paths = posts.map(item => ({\n    params: {\n      slug: item.slug\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n} // #########################################################################################\n// #########################################################################################\n\nfunction Post({\n  post\n}) {\n  return /*#__PURE__*/_jsx(BlogPost, {\n    post: post\n  });\n}\n\nexport default Post;","map":null,"metadata":{},"sourceType":"module"}