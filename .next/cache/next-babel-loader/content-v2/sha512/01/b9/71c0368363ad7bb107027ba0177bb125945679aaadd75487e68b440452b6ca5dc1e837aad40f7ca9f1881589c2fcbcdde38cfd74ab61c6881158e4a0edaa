{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\tarasenko_ag\\\\Desktop\\\\blog\\\\MyBlog\\\\frontNextJs\\\\pages\\\\snippets\\\\[slug].js\";\nimport React from \"react\";\nimport Snippet from \"../../components/Snippet.jsx\";\nimport Layout from '../../components/Layout.jsx'; //! REMOVE THIS LINE LATER\n\nprocess.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0; // #########################################################################################\n// #########################################################################################\n\n// ##################################################\n// getStaticProps({params}) {\n//     //destructure response to data obj, response data from apollo will be in data prop.\n//     //so destructuring should be for 2 layers\n//     //GraphQL query format - ( { query: *query*, variables: {} } ). Response will be if a form of - {data: {posts: [{post}, {post}]}}\n//     //but with only 1 item in the array - {data: {posts: [{post}]}}, so to get the final object 3 layers must be destructured..\n//     const graphQuery = gql`\n//       query GetSinglePostQuery($slug: String) { \n//         posts(where: {slug: $slug}) {\n//           slug\n//           title\n//           date\n//           excerpt\n//           content {\n//             text\n//             raw\n//             markdown\n//             html\n//           }\n//             coverImage {\n//               url\n//             }\n//         }\n//       } \n//     `;\n//     const { data: { posts: [post] } } = await client.query(\n//       {query: graphQuery, variables: {slug: params.slug}}\n//     );\n//     return { props: {post} }\n//   }\n// #########################################################################################\n// #########################################################################################\n// This function gets called at build time\n// export async function getStaticPaths() {\n//   const { data: {posts} } = await client.query(\n//     {query: gql`{posts { slug } }`}\n//   );\n//   const paths = posts.map(item => ({params: {slug: item.slug}}));\n//   return { paths, fallback: false }\n// }\n// #########################################################################################\n// #########################################################################################\nfunction Post(_ref) {\n  var snippet = _ref.snippet;\n  console.log(\"SNIPPET >\", snippet);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Layout, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidemenu\",\n        children: \"Side menu here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Snippet, {\n        snippet: snippet\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_c = Post;\nexport var __N_SSG = true;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["C:/Users/tarasenko_ag/Desktop/blog/MyBlog/frontNextJs/pages/snippets/[slug].js"],"names":["React","Snippet","Layout","process","env","Post","snippet","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,MAAP,MAAmB,6BAAnB,C,CAGA;;AACAC,OAAO,CAACC,GAAR,CAAY,8BAAZ,IAA8C,CAA9C,C,CAGA;AACA;;AAsDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEE;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIF;AACA;AACA,SAASC,IAAT,OAA2B;AAAA,MAAXC,OAAW,QAAXA,OAAW;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,OAAzB;AAEA,sBAAO;AAAA,2BACL,QAAC,MAAD;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,OAAD;AAAS,QAAA,OAAO,EAAEA;AAAlB;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADK,mBAAP;AAQH;;KAXQD,I;;AAaT,eAAeA,IAAf","sourcesContent":["import React from \"react\";\r\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\r\nimport Snippet from \"../../components/Snippet.jsx\";\r\nimport Layout from '../../components/Layout.jsx';\r\n\r\n\r\n//! REMOVE THIS LINE LATER\r\nprocess.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0;\r\n\r\n\r\n// #########################################################################################\r\n// #########################################################################################\r\nconst client = new ApolloClient({\r\n  uri: process.env.REACT_APP_GRAPH_API,\r\n  cache: new InMemoryCache()\r\n});\r\n\r\n\r\n// #########################################################################################\r\n// #########################################################################################\r\n// This function gets called at build time\r\nexport async function getStaticPaths() {\r\n    const { data: {snippets} } = await client.query(\r\n      {query: gql`{snippets { slug } }`}\r\n    );\r\n  \r\n    const paths = snippets.map(item => ({params: {slug: item.slug}}));\r\n    return { paths, fallback: false }\r\n  }\r\n\r\n// #########################################################################################\r\n// #########################################################################################\r\nexport async function getStaticProps( {params} ) {\r\n  //destructure response to data obj, response data from apollo will be in data prop.\r\n  //so destructuring should be for 2 layers\r\n  //GraphQL query format - ( { query: *query*, variables: {} } ). Response will be if a form of - {data: {posts: [{post}, {post}]}}\r\n  //but with only 1 item in the array - {data: {posts: [{post}]}}, so to get the final object 3 layers must be destructured..\r\n  const graphQuery = gql`\r\n    query GetSinglePostQuery($slug: String) { \r\n        snippets(where: {slug: $slug}) {\r\n            title\r\n            excerpt\r\n            slug\r\n            tags\r\n            content1{\r\n              html\r\n              markdown\r\n            }\r\n            content\r\n            repo\r\n            example\r\n        }\r\n    } \r\n  `;\r\n \r\n  const { data: { snippets: [snippet] } } = await client.query(\r\n    {query: graphQuery, variables: {slug: params.slug}}\r\n  );\r\n\r\n  console.log(\"SNIPPET SINGLE SLUG DATA #### \", snippet);\r\n\r\n  return { props: {snippet} }\r\n}\r\n\r\n\r\n// ##################################################\r\n// getStaticProps({params}) {\r\n//     //destructure response to data obj, response data from apollo will be in data prop.\r\n//     //so destructuring should be for 2 layers\r\n//     //GraphQL query format - ( { query: *query*, variables: {} } ). Response will be if a form of - {data: {posts: [{post}, {post}]}}\r\n//     //but with only 1 item in the array - {data: {posts: [{post}]}}, so to get the final object 3 layers must be destructured..\r\n//     const graphQuery = gql`\r\n//       query GetSinglePostQuery($slug: String) { \r\n//         posts(where: {slug: $slug}) {\r\n//           slug\r\n//           title\r\n//           date\r\n//           excerpt\r\n//           content {\r\n//             text\r\n//             raw\r\n//             markdown\r\n//             html\r\n//           }\r\n//             coverImage {\r\n//               url\r\n//             }\r\n//         }\r\n//       } \r\n//     `;\r\n   \r\n//     const { data: { posts: [post] } } = await client.query(\r\n//       {query: graphQuery, variables: {slug: params.slug}}\r\n//     );\r\n  \r\n//     return { props: {post} }\r\n//   }\r\n  \r\n  // #########################################################################################\r\n  // #########################################################################################\r\n  // This function gets called at build time\r\n  // export async function getStaticPaths() {\r\n  //   const { data: {posts} } = await client.query(\r\n  //     {query: gql`{posts { slug } }`}\r\n  //   );\r\n  \r\n  //   const paths = posts.map(item => ({params: {slug: item.slug}}));\r\n  //   return { paths, fallback: false }\r\n  // }\r\n\r\n\r\n\r\n// #########################################################################################\r\n// #########################################################################################\r\nfunction Post( {snippet} ) {\r\n    console.log(\"SNIPPET >\", snippet);\r\n\r\n    return <>\r\n      <Layout >\r\n        <div className=\"sidemenu\">\r\n          Side menu here\r\n        </div>\r\n        <Snippet snippet={snippet} />\r\n      </Layout>\r\n    </>\r\n}\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}