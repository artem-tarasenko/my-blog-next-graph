{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\tarasenko_ag\\\\Desktop\\\\blog\\\\MyBlog\\\\frontNextJs\\\\pages\\\\posts\\\\[slug].js\";\nimport React from \"react\";\nimport { useRouter } from 'next/router';\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client'; //import client from '../../client';\n\nfunction Post({\n  post\n}) {\n  console.log(\" RENDER POST > \", posts);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: post.slug\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 11\n  }, this);\n} // #########################################################################################\n// #########################################################################################\n// #########################################################################################\n// #########################################################################################\n\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_GRAPH_API,\n  cache: new InMemoryCache()\n});\nexport async function getStaticProps({\n  params\n}) {\n  //destructure response to data obj, response data from apollo will be in data prop.\n  //so destructuring should be for 2 layers\n  const graphQuery = gql`\n    query GetSinglePostQuery($slug: String) { \n      posts(where: {slug: $slug}) {\n        slug\n        title\n        date\n        excerpt\n      }\n    } \n  `; //GraphQL query format - ( { query: *query*, variables: {} } )\n\n  const {\n    data: {\n      posts: [post]\n    }\n  } = await client.query({\n    query: graphQuery,\n    variables: {\n      slug: params.slug\n    }\n  }); // const [ testEntity ] = posts;\n  // console.log(\"PROPS Posts >> \", posts);\n  // console.log(\"PROPS test >> \", testEntity);\n  // const post = posts.find(item => item.slug === params.slug)\n\n  return {\n    props: {\n      post\n    }\n  };\n} // This function gets called at build time\n\nexport async function getStaticPaths() {\n  const {\n    data: {\n      posts\n    }\n  } = await client.query({\n    query: gql`{posts { slug } }`\n  }); //const postsSlugs = postsData.data.posts;\n\n  const paths = posts.map(item => ({\n    params: {\n      slug: item.slug\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport default Post;","map":{"version":3,"sources":["C:/Users/tarasenko_ag/Desktop/blog/MyBlog/frontNextJs/pages/posts/[slug].js"],"names":["React","useRouter","ApolloClient","InMemoryCache","gql","Post","post","console","log","posts","title","slug","client","uri","process","env","REACT_APP_GRAPH_API","cache","getStaticProps","params","graphQuery","data","query","variables","props","getStaticPaths","paths","map","item","fallback"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,GAAtC,QAAiD,gBAAjD,C,CACA;;AAEA,SAASC,IAAT,CAAe;AAACC,EAAAA;AAAD,CAAf,EAAwB;AAEtBC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BC,KAA/B;AACA,sBAAQ,QAAC,KAAD,CAAO,QAAP;AAAA,4BACA;AAAA,gBAAKH,IAAI,CAACI;AAAV;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAA;AAAA;AAAA;AAAA,YAFA,eAGA;AAAA,gBAAIJ,IAAI,CAACK;AAAT;AAAA;AAAA;AAAA;AAAA,YAHA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAOD,C,CAED;AACA;AACA;AACA;;;AAIA,MAAMC,MAAM,GAAG,IAAIV,YAAJ,CAAiB;AAC9BW,EAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,mBADa;AAE9BC,EAAAA,KAAK,EAAE,IAAId,aAAJ;AAFuB,CAAjB,CAAf;AAMA,OAAO,eAAee,cAAf,CAA+B;AAACC,EAAAA;AAAD,CAA/B,EAA0C;AAC/C;AACA;AACA,QAAMC,UAAU,GAAGhB,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GATE,CAH+C,CAc/C;;AACA,QAAM;AAAEiB,IAAAA,IAAI,EAAE;AAAEZ,MAAAA,KAAK,EAAE,CAACH,IAAD;AAAT;AAAR,MAA8B,MAAMM,MAAM,CAACU,KAAP,CAAa;AACnDA,IAAAA,KAAK,EAAEF,UAD4C;AAEnDG,IAAAA,SAAS,EAAE;AAACZ,MAAAA,IAAI,EAAEQ,MAAM,CAACR;AAAd;AAFwC,GAAb,CAA1C,CAf+C,CAoB/C;AAEA;AACA;AAEA;;AACA,SAAO;AAAEa,IAAAA,KAAK,EAAE;AAAClB,MAAAA;AAAD;AAAT,GAAP;AACD,C,CAMD;;AACA,OAAO,eAAemB,cAAf,GAAgC;AACrC,QAAM;AAAEJ,IAAAA,IAAI,EAAE;AAACZ,MAAAA;AAAD;AAAR,MAAoB,MAAMG,MAAM,CAACU,KAAP,CAAa;AAC3CA,IAAAA,KAAK,EAAElB,GAAI;AADgC,GAAb,CAAhC,CADqC,CAKrC;;AACA,QAAMsB,KAAK,GAAGjB,KAAK,CAACkB,GAAN,CAAUC,IAAI,KAAK;AAACT,IAAAA,MAAM,EAAE;AAACR,MAAAA,IAAI,EAAEiB,IAAI,CAACjB;AAAZ;AAAT,GAAL,CAAd,CAAd;AACA,SAAO;AAAEe,IAAAA,KAAF;AAASG,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD;AAGD,eAAexB,IAAf","sourcesContent":["import React from \"react\";\r\nimport { useRouter } from 'next/router';\r\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\r\n//import client from '../../client';\r\n\r\nfunction Post( {post} ) {\r\n\r\n  console.log(\" RENDER POST > \", posts);\r\n  return  <React.Fragment>\r\n          <h1>{post.title}</h1>\r\n          <hr />\r\n          <p>{post.slug}</p>\r\n\r\n          </React.Fragment>\r\n\r\n}\r\n\r\n// #########################################################################################\r\n// #########################################################################################\r\n// #########################################################################################\r\n// #########################################################################################\r\n\r\n\r\n\r\nconst client = new ApolloClient({\r\n  uri: process.env.REACT_APP_GRAPH_API,\r\n  cache: new InMemoryCache()\r\n});\r\n\r\n\r\nexport async function getStaticProps( {params} ) {\r\n  //destructure response to data obj, response data from apollo will be in data prop.\r\n  //so destructuring should be for 2 layers\r\n  const graphQuery = gql`\r\n    query GetSinglePostQuery($slug: String) { \r\n      posts(where: {slug: $slug}) {\r\n        slug\r\n        title\r\n        date\r\n        excerpt\r\n      }\r\n    } \r\n  `;\r\n\r\n  //GraphQL query format - ( { query: *query*, variables: {} } )\r\n  const { data: { posts: [post] } } = await client.query({\r\n      query: graphQuery, \r\n      variables: {slug: params.slug}\r\n  });\r\n\r\n  // const [ testEntity ] = posts;\r\n\r\n  // console.log(\"PROPS Posts >> \", posts);\r\n  // console.log(\"PROPS test >> \", testEntity);\r\n\r\n  // const post = posts.find(item => item.slug === params.slug)\r\n  return { props: {post} }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// This function gets called at build time\r\nexport async function getStaticPaths() {\r\n  const { data: {posts} } = await client.query({\r\n    query: gql`{posts { slug } }`\r\n  });\r\n\r\n  //const postsSlugs = postsData.data.posts;\r\n  const paths = posts.map(item => ({params: {slug: item.slug}}));\r\n  return { paths, fallback: false }\r\n}\r\n\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}