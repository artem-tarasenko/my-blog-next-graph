{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\tarasenko_ag\\\\Desktop\\\\blog\\\\MyBlog\\\\frontNextJs\\\\pages\\\\posts\\\\[slug].js\";\nimport React from \"react\";\nimport BlogPost from \"../../components/BlogPost.jsx\";\nimport Blog from \"../../components/blog.jsx\";\nimport Layout from '../../components/Layout.jsx'; //! REMOVE THIS LINE LATER\n\nprocess.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0; // #########################################################################################\n// #########################################################################################\n\n// #########################################################################################\n// #########################################################################################\nfunction Post(_ref) {\n  var post = _ref.post;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(BlogPost, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_c = Post;\nexport var __N_SSG = true;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["C:/Users/tarasenko_ag/Desktop/blog/MyBlog/frontNextJs/pages/posts/[slug].js"],"names":["React","BlogPost","Blog","Layout","process","env","Post","post"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,QAAP,MAAqB,+BAArB;AACA,OAAOC,IAAP,MAAiB,2BAAjB;AACA,OAAOC,MAAP,MAAmB,6BAAnB,C,CAEA;;AACAC,OAAO,CAACC,GAAR,CAAY,8BAAZ,IAA8C,CAA9C,C,CAEA;AACA;;AAwDA;AACA;AACA,SAASC,IAAT,OAAwB;AAAA,MAARC,IAAQ,QAARA,IAAQ;AACtB,sBAAQ;AAAA,2BACN,QAAC,MAAD;AAAA,6BACE,QAAC,QAAD;AAAU,QAAA,IAAI,EAAEA;AAAhB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADM,mBAAR;AAKD;;KANQD,I;;AAQT,eAAeA,IAAf","sourcesContent":["import React from \"react\";\r\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\r\nimport BlogPost from \"../../components/BlogPost.jsx\";\r\nimport Blog from \"../../components/blog.jsx\";\r\nimport Layout from '../../components/Layout.jsx';\r\n\r\n//! REMOVE THIS LINE LATER\r\nprocess.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0;\r\n\r\n// #########################################################################################\r\n// #########################################################################################\r\nconst client = new ApolloClient({\r\n  uri: process.env.REACT_APP_GRAPH_API,\r\n  cache: new InMemoryCache()\r\n});\r\n\r\n\r\n// #########################################################################################\r\n// #########################################################################################\r\nexport async function getStaticProps( {params} ) {\r\n  //destructure response to data obj, response data from apollo will be in data prop.\r\n  //so destructuring should be for 2 layers\r\n  //GraphQL query format - ( { query: *query*, variables: {} } ). Response will be if a form of - {data: {posts: [{post}, {post}]}}\r\n  //but with only 1 item in the array - {data: {posts: [{post}]}}, so to get the final object 3 layers must be destructured..\r\n  const graphQuery = gql`\r\n    query GetSinglePostQuery($slug: String) { \r\n      posts(where: {slug: $slug}) {\r\n        slug\r\n        title\r\n        date\r\n        excerpt\r\n        content {\r\n          text\r\n          raw\r\n          markdown\r\n          html\r\n        }\r\n          coverImage {\r\n            url\r\n          }\r\n      }\r\n    } \r\n  `;\r\n \r\n  const { data: { posts: [post] } } = await client.query(\r\n    {query: graphQuery, variables: {slug: params.slug}}\r\n  );\r\n\r\n  return { props: {post} }\r\n}\r\n\r\n// #########################################################################################\r\n// #########################################################################################\r\n// This function gets called at build time\r\nexport async function getStaticPaths() {\r\n  const { data: {posts} } = await client.query(\r\n    {query: gql`{posts { slug } }`}\r\n  );\r\n\r\n  const paths = posts.map(item => ({params: {slug: item.slug}}));\r\n  return { paths, fallback: false }\r\n}\r\n\r\n\r\n\r\n\r\n// #########################################################################################\r\n// #########################################################################################\r\nfunction Post( {post} ) {\r\n  return  <>\r\n    <Layout>\r\n      <BlogPost post={post} />\r\n    </Layout>\r\n  </>\r\n}\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}