{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\tarasenko_ag\\\\Desktop\\\\blog\\\\MyBlog\\\\frontNextJs\\\\pages\\\\snippets\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useReducer, useState } from \"react\";\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\nimport Layout from '../../components/Layout.jsx';\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'; // ###############################################################\n// ###############################################################\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_GRAPH_API,\n  cache: new InMemoryCache()\n}); // ###############################################################\n// ###############################################################\n// This function gets called at build time\n\nexport async function getStaticProps() {\n  //destructure response to data obj\n  const {\n    data: {\n      snippets\n    }\n  } = await client.query({\n    query: gql`{ \n            snippets {\n                title\n                slug\n                tags\n                excerpt\n                createdAt\n              } \n        }`\n  }); //collecting all possible tags for snippets to pass them as default value\n\n  let tagsArray = [];\n  snippets.forEach(snippet => snippet.tags.forEach(tag => !tagsArray.includes(tag) && tagsArray.push(tag)));\n  let newArr = [];\n  tagsArray.forEach(item => newArr.push({\n    tag: item,\n    state: true\n  }));\n  const initialContent = {\n    snippets: snippets,\n    filter: newArr,\n    allTags: tagsArray,\n    defaultFilter: newArr\n  };\n  return {\n    props: initialContent\n  };\n}\nconst ACTIONS = {\n  ADD_FILTER: 'add',\n  REMOVE_FILTER: 'remove'\n};\n\nfunction reducer(content, action) {\n  const {\n    tag,\n    filter,\n    snippets\n  } = content;\n  console.log(\"Reducer - tag\", tag);\n  console.log(\"Reducer - filter\", filter);\n  console.log(\"Reducer - snippets\", snippets); //###1st test- Adding or removing filter\n  // if tags DO NOT have a tag with isActive=false => ADDING\n  //###2 test 1st lvl or 2+\n  // if TAGS(item has item.isActive=false) - NO - them 1st\n  //set target tag isSelected - update tags array\n  //filter snippets to a [tag] - newSnippets-1 (could be not new array but resulting after filtering for selected)\n  //get all tags from newSnippets-1 and update TAGS \n  // res => half tags active, 1 selected\n  // if TAGS(item has item.isActive=false) - YES - them 2nd+\n  //set target tag isSelected\n  // filter newSnippets-1 (or just snippets) to [TAG1, TAG2] with func\n  // (could be not new array but resulting after filtering for selected)\n  // get all tags from newSnippets (could be just 1 snippet already) and Update tags\n  // res => 2 selecetd tags and a few active\n  //further clicks repear 2 step above\n  // if tags HAS a tag with isActive=false => REMOVING\n  //2 test 1st lvl or 2+\n  // if TAGS(item has item.isSelected = 1) - NO - them 1st\n  //get default snippets to render\n  //reset TAGS - all to isActive and notSelected\n  //res => all to defaults\n  // if TAGS(item has item.isSelected 2+ ) - them 2nd+\n  //set target tag isSelected=false - \n  //update tags array\n  //filter snippets with new TAGS array by selected\n  //update TAGS from snippets and set needed to isActive\n  //res => TAGS with -1 selected, half active\n  // switch (action.type) {\n  //     case ACTIONS.ADD_FILTER: {//or just a string\n  //         //test \n  //         return null\n  //     }\n  //     case ACTIONS.REMOVE_FILTER:{ //or just a string\n  //         return null;\n  //     }\n  //     default:\n  //     return content;\n  // }\n} // ###############################################################npm\n// ###############################################################\n\n\nfunction Index({\n  snippets,\n  filter,\n  allTags,\n  defaultFilter\n}) {\n  // const [snippetsArray, setSnippetsArray] = useState(snippets);\n  // const [filter, setFilter] = useState(allTags)\n  const {\n    0: content,\n    1: dispatch\n  } = useReducer(reducer, {\n    snippets,\n    filter,\n    allTags,\n    defaultFilter\n  }); //dispatch({ type: ACTIONS.INCREMENT or a string, payload: {var} })\n  //types through global variable - ACTIONS.INCREMENT\n\n  console.log(\"SNIPPETS PROPS DATA > \", snippets);\n  console.log(\"FILTER PROPS DATA > \", filter);\n  console.log(\"ALL TAGS PROPS DATA > \", allTags);\n  console.log(\"DEF FILTER PROPS DATA > \", defaultFilter);\n\n  function sortByTag(e) {\n    console.log(\"###########################################################################\");\n    console.log(\"###########################################################################\");\n    console.group('Init sorting');\n    console.log(\"On Click # Snippets pressed\", e.target.value);\n    console.log(\"On Click # Snippets arr\", e.target.classList);\n    console.log(\"On click # event\", e.target);\n    console.groupEnd();\n    let filterValue = [];\n\n    if (e.target.classList.contains(\"selected\")) {\n      //DEACTIVATING FILTER\n      console.group('Deactivating...');\n      e.target.classList.remove(\"selected\"); //test whether filter had 1 tag or more\n\n      if (filter.length = 1) {\n        //resetting filter to default\n        console.group('Deselecting tag');\n        console.log(\"Removing last filter (filter length):\", filter.length);\n        setFilter(tags);\n        console.log(\"Resetting default filter (length):\", filter.length);\n        console.groupEnd();\n      } else {\n        //remove tag from filter\n        console.log(\"At least 2 filters, removing selected (init filterss, remove tag):\", filter, e.target.value);\n        setFilter(prevValue => prevValue.filter(tag != e.target.value));\n        console.log(\"New filter value:\", filter);\n        console.groupEnd();\n      }\n    } else if (!e.target.classList.contains(\"selected\")) {\n      //ACTIVATING FILTER\n      console.group('Activating...');\n      e.target.classList.add(\"selected\"); //test whether filter was default or not\n\n      if (filter === tags) {\n        console.log(\"Filters are equal (tags, filter):\", tags.length, filter.length); //remove all filter data if filter=tags, add 1 selected\n        //rerender snippets\n\n        console.log(\"Updating filter, should be 1 item only\");\n        setFilter([e.target.value]);\n        console.log(\"New filter value:\", filter);\n        console.groupEnd();\n      } else {\n        console.log(\"Filters are NOT equal (tags, filter):\", tags.length, filter.length);\n        setFilter(prevValue => [...prevValue, e.target.value]);\n        console.log(\"New filter value:\", filter);\n        console.groupEnd();\n      } //reset filter if 1 only was selected\n      //remove selected if 2+ were selected\n      //rerender snippets\n\n    } // const filteredArray = snippetsArray.filter(item => item.tags.includes(e.target.value));\n    // console.log(\"On click # filtered array of snippets: \", filteredArray);\n    // setSnippetsArray(filteredArray);\n\n  }\n\n  function sortByTag2(e) {\n    console.log(\"SortByTag:\", e.target);\n    dispatch({\n      tag: e.target.value,\n      filter: filter,\n      snippets: snippets\n    });\n  }\n\n  function initTags() {\n    //collecting all possible tags for CURRENT snippets to pass them as default value\n    //allTags - all possible from SSR stage\n    let sortedTags = [];\n    snippetsArray.forEach(snippet => snippet.tags.forEach(tag => !sortedTags.includes(tag) && sortedTags.push(tag))); // console.log(\"ARR\", tagsArray.map(tag => { return {tag: tag, isActive: true}}))\n\n    let newSortedArr = [];\n    sortedTags.forEach(item => newSortedArr.push({\n      tag: item,\n      state: true\n    }));\n    setFilter(newSortedArr);\n  }\n\n  function sortSnippets(e) {\n    console.log(\"click\", e.target); //const targetTagStatus = ((filter.find(item => item.tag === e.target.value).state));\n\n    const updatedFilter = filter.map(obj => obj.tag === e.target.value ? _objectSpread(_objectSpread({}, obj), {}, {\n      state: !obj.state\n    }) : obj);\n    console.log(updatedFilter);\n    initTags();\n    setFilter(updatedFilter);\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-column mb-6 flex flex-col\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"px-64\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Nay whatever way delicate passed of avoid might sing whatever all window concealed. Dissuade whole many age mistress late sentiments held doubt scarcely against invitation answer enable. Visited engage steepest shall beyond subject civilly performed concluded offence farther.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tags-filter flex flex-row mt-6\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"tag px-2 py-1 border mr-2\",\n                children: \"TEST\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 37\n              }, this), filter.map((obj, index) => {\n                if (obj.state) {\n                  return /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"tag px-2 py-1 border mr-2\",\n                    onClick: sortByTag2,\n                    value: obj.tag,\n                    children: obj.tag\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 237,\n                    columnNumber: 56\n                  }, this);\n                } else {\n                  return null;\n                }\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pt-8 flex flex-row flex-wrap items-stretch\",\n            children:\n            /*#__PURE__*/\n            // <>\n            // <div className=\"p-2 flex-shring-0 w-1/4 flex\">\n            //     <div className=\"bg-gray-200 p-3\">\n            //         <h2 className=\"pb-2 text-lg leading-5\"><a href={`snippets/${snippet.slug}`}>{snippet.title}</a></h2>\n            //         <p className=\"text-sm leading-4\">{snippet.excerpt}</p>\n            //         <span className=\"snippet-tags flex flex-row pt-2 flex-wrap\">\n            //             {snippet.tags.map(tag => <p className=\"snippet-tag text-sm flex-shrink-0\">{tag}</p>)}\n            //         </span>\n            //     </div>\n            // </div>\n            // </>\n            _jsxDEV(\"p\", {\n              children: \"Temp text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 13\n  }, this);\n}\n\nexport default Index;","map":{"version":3,"sources":["C:/Users/tarasenko_ag/Desktop/blog/MyBlog/frontNextJs/pages/snippets/index.js"],"names":["React","useEffect","useReducer","useState","ApolloClient","InMemoryCache","gql","Layout","process","env","NODE_TLS_REJECT_UNAUTHORIZED","client","uri","REACT_APP_GRAPH_API","cache","getStaticProps","data","snippets","query","tagsArray","forEach","snippet","tags","tag","includes","push","newArr","item","state","initialContent","filter","allTags","defaultFilter","props","ACTIONS","ADD_FILTER","REMOVE_FILTER","reducer","content","action","console","log","Index","dispatch","sortByTag","e","group","target","value","classList","groupEnd","filterValue","contains","remove","length","setFilter","prevValue","add","sortByTag2","initTags","sortedTags","snippetsArray","newSortedArr","sortSnippets","updatedFilter","map","obj","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useReducer, useState } from \"react\";\r\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\r\n\r\nimport Layout from '../../components/Layout.jsx';\r\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'\r\n\r\n\r\n// ###############################################################\r\n// ###############################################################\r\nconst client = new ApolloClient({\r\n    uri: process.env.REACT_APP_GRAPH_API,\r\n    cache: new InMemoryCache()\r\n});\r\n\r\n// ###############################################################\r\n// ###############################################################\r\n// This function gets called at build time\r\nexport async function getStaticProps() {\r\n    //destructure response to data obj\r\n    const { data: {snippets} } = await client.query({\r\n        query: gql`{ \r\n            snippets {\r\n                title\r\n                slug\r\n                tags\r\n                excerpt\r\n                createdAt\r\n              } \r\n        }`\r\n    });\r\n\r\n    //collecting all possible tags for snippets to pass them as default value\r\n    let tagsArray = []\r\n    snippets.forEach(snippet => snippet.tags.forEach(tag => !tagsArray.includes(tag) && tagsArray.push(tag)));\r\n\r\n    let newArr = [];\r\n    tagsArray.forEach(item => newArr.push({tag: item, state: true}));\r\n    const initialContent = { snippets: snippets, filter: newArr, allTags: tagsArray, defaultFilter: newArr }\r\n\r\n    return { props: initialContent};\r\n  }\r\n\r\n\r\nconst ACTIONS = {\r\n    ADD_FILTER: 'add',\r\n    REMOVE_FILTER: 'remove',\r\n\r\n  }\r\n\r\nfunction reducer(content, action) {\r\n    const { tag, filter, snippets} = content;\r\n    console.log(\"Reducer - tag\", tag);\r\n    console.log(\"Reducer - filter\", filter);\r\n    console.log(\"Reducer - snippets\", snippets);\r\n\r\n    //###1st test- Adding or removing filter\r\n    \r\n        // if tags DO NOT have a tag with isActive=false => ADDING\r\n            //###2 test 1st lvl or 2+\r\n                // if TAGS(item has item.isActive=false) - NO - them 1st\r\n                    //set target tag isSelected - update tags array\r\n                    //filter snippets to a [tag] - newSnippets-1 (could be not new array but resulting after filtering for selected)\r\n                    //get all tags from newSnippets-1 and update TAGS \r\n                        // res => half tags active, 1 selected\r\n\r\n\r\n                // if TAGS(item has item.isActive=false) - YES - them 2nd+\r\n                    //set target tag isSelected\r\n                    // filter newSnippets-1 (or just snippets) to [TAG1, TAG2] with func\r\n                    // (could be not new array but resulting after filtering for selected)\r\n                    // get all tags from newSnippets (could be just 1 snippet already) and Update tags\r\n                        // res => 2 selecetd tags and a few active\r\n\r\n                //further clicks repear 2 step above\r\n\r\n\r\n        // if tags HAS a tag with isActive=false => REMOVING\r\n            //2 test 1st lvl or 2+\r\n                // if TAGS(item has item.isSelected = 1) - NO - them 1st\r\n                    //get default snippets to render\r\n                    //reset TAGS - all to isActive and notSelected\r\n                    //res => all to defaults\r\n\r\n                // if TAGS(item has item.isSelected 2+ ) - them 2nd+\r\n                    //set target tag isSelected=false - \r\n                    //update tags array\r\n                    //filter snippets with new TAGS array by selected\r\n                    //update TAGS from snippets and set needed to isActive\r\n                    //res => TAGS with -1 selected, half active\r\n\r\n\r\n\r\n\r\n    // switch (action.type) {\r\n    //     case ACTIONS.ADD_FILTER: {//or just a string\r\n\r\n    //         //test \r\n\r\n\r\n    //         return null\r\n    //     }\r\n\r\n    //     case ACTIONS.REMOVE_FILTER:{ //or just a string\r\n    //         return null;\r\n    //     }\r\n    //     default:\r\n    //     return content;\r\n    // }\r\n}\r\n\r\n// ###############################################################npm\r\n// ###############################################################\r\nfunction Index( {snippets, filter, allTags, defaultFilter} ) {\r\n    // const [snippetsArray, setSnippetsArray] = useState(snippets);\r\n    // const [filter, setFilter] = useState(allTags)\r\n    const [content, dispatch] = useReducer(reducer, {snippets, filter, allTags, defaultFilter})\r\n\r\n    //dispatch({ type: ACTIONS.INCREMENT or a string, payload: {var} })\r\n    //types through global variable - ACTIONS.INCREMENT\r\n\r\n    console.log(\"SNIPPETS PROPS DATA > \", snippets);\r\n    console.log(\"FILTER PROPS DATA > \", filter);\r\n    console.log(\"ALL TAGS PROPS DATA > \", allTags);\r\n    console.log(\"DEF FILTER PROPS DATA > \", defaultFilter);\r\n\r\n    function sortByTag(e) {\r\n        console.log(\"###########################################################################\");\r\n        console.log(\"###########################################################################\");\r\n        console.group('Init sorting');\r\n            console.log(\"On Click # Snippets pressed\", e.target.value);\r\n            console.log(\"On Click # Snippets arr\", e.target.classList);\r\n            console.log(\"On click # event\", e.target);\r\n        console.groupEnd();\r\n\r\n        let filterValue = [];\r\n\r\n\r\n\r\n        if(e.target.classList.contains(\"selected\")) {\r\n            //DEACTIVATING FILTER\r\n            console.group('Deactivating...');\r\n            e.target.classList.remove(\"selected\");\r\n            //test whether filter had 1 tag or more\r\n            if(filter.length = 1) {\r\n                //resetting filter to default\r\n                console.group('Deselecting tag');\r\n                console.log(\"Removing last filter (filter length):\", filter.length);\r\n                setFilter(tags);\r\n                console.log(\"Resetting default filter (length):\", filter.length);\r\n                console.groupEnd();\r\n            } else {\r\n                //remove tag from filter\r\n                console.log(\"At least 2 filters, removing selected (init filterss, remove tag):\", filter, e.target.value);\r\n                \r\n                setFilter(prevValue => prevValue.filter( tag != e.target.value))\r\n                console.log(\"New filter value:\", filter);\r\n                console.groupEnd();\r\n            }\r\n\r\n        } else if(!e.target.classList.contains(\"selected\")) {\r\n            //ACTIVATING FILTER\r\n            console.group('Activating...');\r\n            e.target.classList.add(\"selected\");\r\n\r\n            //test whether filter was default or not\r\n            if(filter === tags) {\r\n                console.log(\"Filters are equal (tags, filter):\", tags.length, filter.length);\r\n                //remove all filter data if filter=tags, add 1 selected\r\n                //rerender snippets\r\n                console.log(\"Updating filter, should be 1 item only\");\r\n                setFilter([e.target.value]);\r\n                console.log(\"New filter value:\", filter);\r\n                console.groupEnd();\r\n\r\n            } else {\r\n                console.log(\"Filters are NOT equal (tags, filter):\", tags.length, filter.length);\r\n                \r\n                setFilter(prevValue => [...prevValue, e.target.value])\r\n                console.log(\"New filter value:\", filter);\r\n                console.groupEnd();\r\n            }\r\n            //reset filter if 1 only was selected\r\n            //remove selected if 2+ were selected\r\n            //rerender snippets\r\n        }\r\n        \r\n\r\n        \r\n\r\n        // const filteredArray = snippetsArray.filter(item => item.tags.includes(e.target.value));\r\n        // console.log(\"On click # filtered array of snippets: \", filteredArray);\r\n        // setSnippetsArray(filteredArray);\r\n    }\r\n\r\n    function sortByTag2(e) {\r\n        console.log(\"SortByTag:\", e.target);\r\n        dispatch( {tag: e.target.value, filter: filter, snippets: snippets} )\r\n    }\r\n\r\n    function initTags() {\r\n        //collecting all possible tags for CURRENT snippets to pass them as default value\r\n        //allTags - all possible from SSR stage\r\n        let sortedTags = []\r\n        snippetsArray.forEach(snippet => snippet.tags.forEach(tag => !sortedTags.includes(tag) && sortedTags.push(tag)));\r\n        // console.log(\"ARR\", tagsArray.map(tag => { return {tag: tag, isActive: true}}))\r\n\r\n        let newSortedArr = [];\r\n        sortedTags.forEach( item => newSortedArr.push({tag: item, state: true}))\r\n        setFilter(newSortedArr)\r\n    }\r\n\r\n    function sortSnippets(e) {\r\n\r\n\r\n        console.log(\"click\", e.target);\r\n        //const targetTagStatus = ((filter.find(item => item.tag === e.target.value).state));\r\n\r\n        const updatedFilter = filter.map( obj => obj.tag === e.target.value ? ({...obj, state: !obj.state}) : obj);\r\n        console.log(updatedFilter);\r\n        initTags();\r\n        setFilter(updatedFilter);\r\n        \r\n    }\r\n    \r\n    return  <React.Fragment>\r\n                <Layout >\r\n                    <React.Fragment>\r\n                        <div className=\"flex flex-column mb-6 flex flex-col\">\r\n                            <div className=\"px-64\">\r\n                                <p>Nay whatever way delicate passed of avoid might sing whatever all window concealed. Dissuade whole many age mistress late sentiments held doubt scarcely against invitation answer enable. Visited engage steepest shall beyond subject civilly performed concluded offence farther.</p>\r\n                                <div className=\"tags-filter flex flex-row mt-6\">\r\n                                    <button className=\"tag px-2 py-1 border mr-2\" >TEST</button>\r\n                                    {/* <button className=\"tag px-2 py-1 border mr-2\" onClick={sortSnippets} value={filter[prop]}> */}\r\n                                    {\r\n                                        filter.map( (obj, index) => {\r\n                                            if(obj.state) {\r\n                                                return <button key={index} className=\"tag px-2 py-1 border mr-2\" \r\n                                                                onClick={sortByTag2} \r\n                                                                value={obj.tag}>\r\n                                                            {obj.tag}\r\n                                                        </button>\r\n                                            } else {\r\n                                                return null;\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"pt-8 flex flex-row flex-wrap items-stretch\">\r\n                                {/* {snippetsArray.map(snippet => {\r\n                                    let isActive = false;\r\n                                    //console.log(\"Snippet in MAP\", snippet.title);\r\n                                    for(let tag of snippet.tags) {\r\n                                        \r\n                                        //console.log(\"FOR LOOP: (snippet, tag)\", snippet.title, tag);\r\n                                        if(filter.includes(tag)) {\r\n                                            isActive= true;\r\n                                            console.groupCollapsed('ACTIVATING SNIPPET');\r\n                                            console.log(\"title\", snippet.title);\r\n                                            console.log(\"tag\", tag);\r\n                                            console.log(\"Filter on the moment\", filter);\r\n                                            console.log(\"TAGS DEF\", tags);\r\n                                            console.log(\"isActive?\", isActive);\r\n                                            console.groupEnd();\r\n                                            \r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                    \r\n                                    // isActive \r\n                                    //     ? ( <>\r\n                                    //         <div className=\"p-2 flex-shring-0 w-1/4 flex\">\r\n                                    //             <div className=\"bg-gray-200 p-3\">\r\n                                    //                 <h2 className=\"pb-2 text-lg leading-5\"><a href={`snippets/${snippet.slug}`}>{snippet.title}</a></h2>\r\n                                    //                 <p className=\"text-sm leading-4\">{snippet.excerpt}</p>\r\n                                    //                 <span className=\"snippet-tags flex flex-row pt-2 flex-wrap\">\r\n                                    //                     {snippet.tags.map(tag => <p className=\"snippet-tag text-sm flex-shrink-0\">{tag}</p>)}\r\n                                    //                 </span>\r\n                                    //             </div>\r\n                                    //         </div>\r\n                                    //     </>)\r\n                                    //     : null\r\n\r\n                                    if(isActive) {\r\n                                        \r\n                                        return <>\r\n                                             <div className=\"p-2 flex-shring-0 w-1/4 flex\">\r\n                                                 <div className=\"bg-gray-200 p-3\">\r\n                                                     <h2 className=\"pb-2 text-lg leading-5\"><a href={`snippets/${snippet.slug}`}>{snippet.title}</a></h2>\r\n                                                     <p className=\"text-sm leading-4\">{snippet.excerpt}</p>\r\n                                                     <span className=\"snippet-tags flex flex-row pt-2 flex-wrap\">\r\n                                                         {snippet.tags.map(tag => <p className=\"snippet-tag text-sm flex-shrink-0\">{tag}</p>)}\r\n                                                     </span>\r\n                                                 </div>\r\n                                             </div>\r\n                                         </>\r\n                                    } else {\r\n                                        return null\r\n                                    }\r\n\r\n\r\n                                })} */}\r\n\r\n\r\n\r\n                                {\r\n\r\n\r\n                                    // <>\r\n                                    // <div className=\"p-2 flex-shring-0 w-1/4 flex\">\r\n                                    //     <div className=\"bg-gray-200 p-3\">\r\n                                    //         <h2 className=\"pb-2 text-lg leading-5\"><a href={`snippets/${snippet.slug}`}>{snippet.title}</a></h2>\r\n                                    //         <p className=\"text-sm leading-4\">{snippet.excerpt}</p>\r\n                                    //         <span className=\"snippet-tags flex flex-row pt-2 flex-wrap\">\r\n                                    //             {snippet.tags.map(tag => <p className=\"snippet-tag text-sm flex-shrink-0\">{tag}</p>)}\r\n                                    //         </span>\r\n                                    //     </div>\r\n                                    // </div>\r\n                                    // </>\r\n                                    <p>Temp text</p>\r\n                                }\r\n\r\n                            </div>\r\n                        </div>\r\n                    </React.Fragment>\r\n                </Layout>\r\n            </React.Fragment>\r\n}\r\n\r\nexport default Index;"]},"metadata":{},"sourceType":"module"}