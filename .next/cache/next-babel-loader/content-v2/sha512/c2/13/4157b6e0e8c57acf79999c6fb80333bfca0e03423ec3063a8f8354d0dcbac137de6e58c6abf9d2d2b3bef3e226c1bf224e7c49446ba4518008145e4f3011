{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\tarasenko_ag\\\\Desktop\\\\blog\\\\MyBlog\\\\frontNextJs\\\\pages\\\\posts\\\\[slug].js\";\nimport { useRouter } from 'next/router';\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client'; //import client from '../../client';\n\nfunction Post({\n  post\n}) {\n  console.log(\"POST > \", post);\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"TEXT\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 10\n  }, this);\n} // #########################################################################################\n// #########################################################################################\n// #########################################################################################\n// #########################################################################################\n// This function gets called at build time\n\n\nexport async function getStaticPaths() {\n  const client = new ApolloClient({\n    uri: process.env.REACT_APP_GRAPH_API,\n    cache: new InMemoryCache()\n  });\n  const postsData = await client.query({\n    query: gql`{posts { id } }`\n  });\n  const postsId = postsData.data.posts;\n  const paths = postsId.map(item => ({\n    params: {\n      id: item.id\n    }\n  }));\n  console.log(\"POSTS SLUGS VAR > \", postsId);\n  console.log(\"PATHS VAR > \", paths);\n  return {\n    paths,\n    fallback: true\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  const client = new ApolloClient({\n    uri: process.env.REACT_APP_GRAPH_API,\n    cache: new InMemoryCache()\n  });\n  console.log(\"SLUG \", params); //destructure response to data obj\n\n  const {\n    post\n  } = await client.query({\n    query: gql`{ \n          posts(where: {id: ${params.id}}) {\n              id\n              title\n              content {\n                text\n              }\n            } \n      }`\n  });\n  console.log(\"Get static props DATA > \", data);\n  console.log(\"Get static props SLUG > \", slug);\n  return {\n    props: {\n      post\n    }\n  };\n}\nexport default Post;","map":{"version":3,"sources":["C:/Users/tarasenko_ag/Desktop/blog/MyBlog/frontNextJs/pages/posts/[slug].js"],"names":["useRouter","ApolloClient","InMemoryCache","gql","Post","post","console","log","getStaticPaths","client","uri","process","env","REACT_APP_GRAPH_API","cache","postsData","query","postsId","data","posts","paths","map","item","params","id","fallback","getStaticProps","slug","props"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,GAAtC,QAAiD,gBAAjD,C,CACA;;AAEA,SAASC,IAAT,CAAe;AAACC,EAAAA;AAAD,CAAf,EAAwB;AAEtBC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,IAAvB;AACA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAED,C,CAED;AACA;AACA;AACA;AAGA;;;AACA,OAAO,eAAeG,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,IAAIR,YAAJ,CAAiB;AAC9BS,IAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,mBADa;AAE9BC,IAAAA,KAAK,EAAE,IAAIZ,aAAJ;AAFuB,GAAjB,CAAf;AAKA,QAAMa,SAAS,GAAG,MAAMN,MAAM,CAACO,KAAP,CAAa;AACnCA,IAAAA,KAAK,EAAEb,GAAI;AADwB,GAAb,CAAxB;AAKA,QAAMc,OAAO,GAAGF,SAAS,CAACG,IAAV,CAAeC,KAA/B;AACA,QAAMC,KAAK,GAAGH,OAAO,CAACI,GAAR,CAAYC,IAAI,KAAK;AAACC,IAAAA,MAAM,EAAG;AAACC,MAAAA,EAAE,EAAEF,IAAI,CAACE;AAAV;AAAV,GAAL,CAAhB,CAAd;AAEAlB,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCU,OAAlC;AACAX,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4Ba,KAA5B;AAEA,SAAO;AAAEA,IAAAA,KAAF;AAASK,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD;AAGD,OAAO,eAAeC,cAAf,CAA8B;AAACH,EAAAA;AAAD,CAA9B,EAAwC;AAC7C,QAAMd,MAAM,GAAG,IAAIR,YAAJ,CAAiB;AAC5BS,IAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,mBADW;AAE5BC,IAAAA,KAAK,EAAE,IAAIZ,aAAJ;AAFqB,GAAjB,CAAf;AAKAI,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBgB,MAArB,EAN6C,CAO7C;;AACA,QAAM;AAAElB,IAAAA;AAAF,MAAW,MAAMI,MAAM,CAACO,KAAP,CAAa;AAChCA,IAAAA,KAAK,EAAEb,GAAI;AACjB,8BAA8BoB,MAAM,CAACC,EAAG;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AATsC,GAAb,CAAvB;AAYAlB,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCW,IAAxC;AACAZ,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCoB,IAAxC;AACA,SAAO;AAAEC,IAAAA,KAAK,EAAE;AAACvB,MAAAA;AAAD;AAAT,GAAP;AACD;AAGD,eAAeD,IAAf","sourcesContent":["import { useRouter } from 'next/router';\r\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\r\n//import client from '../../client';\r\n\r\nfunction Post( {post} ) {\r\n\r\n  console.log(\"POST > \", post);\r\n  return <p>TEXT</p>\r\n\r\n}\r\n\r\n// #########################################################################################\r\n// #########################################################################################\r\n// #########################################################################################\r\n// #########################################################################################\r\n\r\n\r\n// This function gets called at build time\r\nexport async function getStaticPaths() {\r\n  const client = new ApolloClient({\r\n    uri: process.env.REACT_APP_GRAPH_API,\r\n    cache: new InMemoryCache()\r\n  });\r\n\r\n  const postsData = await client.query({\r\n    query: gql`{posts { id } }`\r\n  });\r\n\r\n\r\n  const postsId = postsData.data.posts;\r\n  const paths = postsId.map(item => ({params: ({id: item.id})}));\r\n\r\n  console.log(\"POSTS SLUGS VAR > \", postsId);\r\n  console.log(\"PATHS VAR > \", paths);\r\n\r\n  return { paths, fallback: true }\r\n}\r\n\r\n\r\nexport async function getStaticProps({params}) {\r\n  const client = new ApolloClient({\r\n      uri: process.env.REACT_APP_GRAPH_API,\r\n      cache: new InMemoryCache()\r\n  });\r\n\r\n  console.log(\"SLUG \", params);\r\n  //destructure response to data obj\r\n  const { post } = await client.query({\r\n      query: gql`{ \r\n          posts(where: {id: ${params.id}}) {\r\n              id\r\n              title\r\n              content {\r\n                text\r\n              }\r\n            } \r\n      }`\r\n  });\r\n\r\n  console.log(\"Get static props DATA > \", data);\r\n  console.log(\"Get static props SLUG > \", slug);\r\n  return { props: {post} }\r\n}\r\n\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}