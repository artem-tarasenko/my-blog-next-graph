{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\tarasenko_ag\\\\Desktop\\\\blog\\\\MyBlog\\\\frontNextJs\\\\pages\\\\posts\\\\[slug].js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// import { useRouter } from 'next/router';\nimport client from '../../client';\nimport BlockContent from '@sanity/block-content-to-react';\nimport imageUrlBuilder from '@sanity/image-url';\n\nfunction urlFor(source) {\n  return imageUrlBuilder(client).image(source);\n}\n\nconst Post = props => {\n  //const router = useRouter()\n  console.log(props);\n  const {\n    title = \"\",\n    body = [],\n    slug = {},\n    url = {},\n    mainImage = {}\n  } = props;\n  console.log(\"Destructuring: title\", title, \"body \", body, \"slug \", slug, \"main image \", mainImage);\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    children: [mainImage && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: urlFor(mainImage).width(50).url()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: props.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BlockContent, _objectSpread({\n      blocks: body,\n      imageOptions: {\n        w: 320,\n        h: 240,\n        fit: 'max'\n      }\n    }, client.config()), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}; // ===============================\n\n\nPost.getInitialProps = async function (context) {\n  console.log(\"Context\", context); // It's important to default the slug so that it doesn't return \"undefined\"\n\n  const {\n    slug = \"\"\n  } = context.query;\n  return await client.fetch(`\n    *[_type == \"post\" && slug.current == $slug][0]\n  `, {\n    slug\n  });\n};\n\nexport default Post;","map":{"version":3,"sources":["C:/Users/tarasenko_ag/Desktop/blog/MyBlog/frontNextJs/pages/posts/[slug].js"],"names":["client","BlockContent","imageUrlBuilder","urlFor","source","image","Post","props","console","log","title","body","slug","url","mainImage","width","w","h","fit","config","getInitialProps","context","query","fetch"],"mappings":";;;;;;;;;AAAA;AACA,OAAOA,MAAP,MAAmB,cAAnB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,SAASC,MAAT,CAAiBC,MAAjB,EAAyB;AACvB,SAAOF,eAAe,CAACF,MAAD,CAAf,CAAwBK,KAAxB,CAA8BD,MAA9B,CAAP;AACD;;AAED,MAAME,IAAI,GAAIC,KAAD,IAAW;AACtB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,QAAM;AAACG,IAAAA,KAAK,GAAG,EAAT;AAAaC,IAAAA,IAAI,GAAG,EAApB;AAAwBC,IAAAA,IAAI,GAAG,EAA/B;AAAmCC,IAAAA,GAAG,GAAG,EAAzC;AAA6CC,IAAAA,SAAS,GAAG;AAAzD,MAA+DP,KAArE;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCC,KAApC,EAA2C,OAA3C,EAAoDC,IAApD,EAA0D,OAA1D,EAAmEC,IAAnE,EAAyE,aAAzE,EAAwFE,SAAxF;AACA,sBACE;AAAA,eACGA,SAAS,iBACR;AAAA,6BACE;AACE,QAAA,GAAG,EAAEX,MAAM,CAACW,SAAD,CAAN,CACFC,KADE,CACI,EADJ,EAEFF,GAFE;AADP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFJ,eAUE;AAAA,gBAAKN,KAAK,CAACG;AAAX;AAAA;AAAA;AAAA;AAAA,YAVF,eAWE,QAAC,YAAD;AACE,MAAA,MAAM,EAAEC,IADV;AAEE,MAAA,YAAY,EAAE;AAAEK,QAAAA,CAAC,EAAE,GAAL;AAAUC,QAAAA,CAAC,EAAE,GAAb;AAAkBC,QAAAA,GAAG,EAAE;AAAvB;AAFhB,OAGMlB,MAAM,CAACmB,MAAP,EAHN;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAxBD,C,CA0BA;;;AAEAb,IAAI,CAACc,eAAL,GAAuB,gBAAeC,OAAf,EAAwB;AAC7Cb,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBY,OAAvB,EAD6C,CAE7C;;AACA,QAAM;AAAET,IAAAA,IAAI,GAAG;AAAT,MAAgBS,OAAO,CAACC,KAA9B;AACA,SAAO,MAAMtB,MAAM,CAACuB,KAAP,CAAc;AAC7B;AACA,GAFe,EAEV;AAAEX,IAAAA;AAAF,GAFU,CAAb;AAGD,CAPD;;AASA,eAAeN,IAAf","sourcesContent":["// import { useRouter } from 'next/router';\r\nimport client from '../../client';\r\nimport BlockContent from '@sanity/block-content-to-react';\r\nimport imageUrlBuilder from '@sanity/image-url';\r\n\r\nfunction urlFor (source) {\r\n  return imageUrlBuilder(client).image(source)\r\n}\r\n\r\nconst Post = (props) => {\r\n  //const router = useRouter()\r\n  console.log(props);\r\n  const {title = \"\", body = [], slug = {}, url = {}, mainImage = {}} = props;\r\n  console.log(\"Destructuring: title\", title, \"body \", body, \"slug \", slug, \"main image \", mainImage);\r\n  return (\r\n    <article>\r\n      {mainImage && (\r\n        <div>\r\n          <img\r\n            src={urlFor(mainImage)\r\n              .width(50)\r\n              .url()}\r\n          />\r\n        </div>\r\n      )}\r\n      <h1>{props.title}</h1>\r\n      <BlockContent\r\n        blocks={body}\r\n        imageOptions={{ w: 320, h: 240, fit: 'max' }}\r\n        {...client.config()}\r\n      />\r\n    </article>\r\n  )\r\n}\r\n\r\n// ===============================\r\n\r\nPost.getInitialProps = async function(context) {\r\n  console.log(\"Context\", context);\r\n  // It's important to default the slug so that it doesn't return \"undefined\"\r\n  const { slug = \"\" } = context.query\r\n  return await client.fetch(`\r\n    *[_type == \"post\" && slug.current == $slug][0]\r\n  `, { slug })\r\n}\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}