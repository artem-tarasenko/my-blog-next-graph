{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\tarasenko_ag\\\\Desktop\\\\blog\\\\MyBlog\\\\frontNextJs\\\\pages\\\\portfolio\\\\[slug].js\";\nimport React from \"react\";\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\nimport BlogPost from \"../../components/BlogPost.jsx\";\nimport Blog from \"../../components/blog.jsx\"; //! REMOVE THIS LINE LATER\n\nprocess.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0; // #########################################################################################\n// #########################################################################################\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_GRAPH_API,\n  cache: new InMemoryCache()\n}); // #########################################################################################\n// #########################################################################################\n\nexport async function getStaticProps({\n  params\n}) {\n  //destructure response to data obj, response data from apollo will be in data prop.\n  //so destructuring should be for 2 layers\n  //GraphQL query format - ( { query: *query*, variables: {} } ). Response will be if a form of - {data: {posts: [{post}, {post}]}}\n  //but with only 1 item in the array - {data: {posts: [{post}]}}, so to get the final object 3 layers must be destructured..\n  const graphQuery = gql`\n    query GetSingleProjectQuery($slug: String) { \n      projects(where: {slug: $slug}) {\n        slug\n        title\n        excerpt\n        tags\n        content {\n          html\n        }\n      }\n    } \n  `;\n  const {\n    data: {\n      projects: [project]\n    }\n  } = await client.query({\n    query: graphQuery,\n    variables: {\n      slug: params.slug\n    }\n  });\n  console.log(\"PORFTOLIO SLUG DATA #### \", project);\n  return {\n    props: {\n      project\n    }\n  };\n} // #########################################################################################\n// #########################################################################################\n// This function gets called at build time\n\nexport async function getStaticPaths() {\n  const {\n    data: {\n      projects\n    }\n  } = await client.query({\n    query: gql`{projects { slug } }`\n  });\n  const paths = projects.map(item => ({\n    params: {\n      slug: item.slug\n    }\n  }));\n  console.log(\"PORTFOLIO From getStaticPath ### \", {\n    paths,\n    fallback: false\n  });\n  return {\n    paths,\n    fallback: false\n  };\n} // #########################################################################################\n// #########################################################################################\n\nfunction Post({\n  project\n}) {\n  return /*#__PURE__*/_jsxDEV(BlogPost, {\n    post: project\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 11\n  }, this);\n}\n\nexport default Post;","map":{"version":3,"sources":["C:/Users/tarasenko_ag/Desktop/blog/MyBlog/frontNextJs/pages/portfolio/[slug].js"],"names":["React","ApolloClient","InMemoryCache","gql","BlogPost","Blog","process","env","client","uri","REACT_APP_GRAPH_API","cache","getStaticProps","params","graphQuery","data","projects","project","query","variables","slug","console","log","props","getStaticPaths","paths","map","item","fallback","Post"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,GAAtC,QAAiD,gBAAjD;AACA,OAAOC,QAAP,MAAqB,+BAArB;AACA,OAAOC,IAAP,MAAiB,2BAAjB,C,CAGA;;AACAC,OAAO,CAACC,GAAR,CAAY,8BAAZ,IAA8C,CAA9C,C,CAGA;AACA;;AACA,MAAMC,MAAM,GAAG,IAAIP,YAAJ,CAAiB;AAC9BQ,EAAAA,GAAG,EAAEH,OAAO,CAACC,GAAR,CAAYG,mBADa;AAE9BC,EAAAA,KAAK,EAAE,IAAIT,aAAJ;AAFuB,CAAjB,CAAf,C,CAMA;AACA;;AACA,OAAO,eAAeU,cAAf,CAA+B;AAACC,EAAAA;AAAD,CAA/B,EAA0C;AAC/C;AACA;AACA;AACA;AACA,QAAMC,UAAU,GAAGX,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAZE;AAcA,QAAM;AAAEY,IAAAA,IAAI,EAAE;AAAEC,MAAAA,QAAQ,EAAE,CAACC,OAAD;AAAZ;AAAR,MAAoC,MAAMT,MAAM,CAACU,KAAP,CAC9C;AAACA,IAAAA,KAAK,EAAEJ,UAAR;AAAoBK,IAAAA,SAAS,EAAE;AAACC,MAAAA,IAAI,EAAEP,MAAM,CAACO;AAAd;AAA/B,GAD8C,CAAhD;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCL,OAAzC;AAEA,SAAO;AAAEM,IAAAA,KAAK,EAAE;AAACN,MAAAA;AAAD;AAAT,GAAP;AACD,C,CAED;AACA;AACA;;AACA,OAAO,eAAeO,cAAf,GAAgC;AACrC,QAAM;AAAET,IAAAA,IAAI,EAAE;AAACC,MAAAA;AAAD;AAAR,MAAuB,MAAMR,MAAM,CAACU,KAAP,CACjC;AAACA,IAAAA,KAAK,EAAEf,GAAI;AAAZ,GADiC,CAAnC;AAIA,QAAMsB,KAAK,GAAGT,QAAQ,CAACU,GAAT,CAAaC,IAAI,KAAK;AAACd,IAAAA,MAAM,EAAE;AAACO,MAAAA,IAAI,EAAEO,IAAI,CAACP;AAAZ;AAAT,GAAL,CAAjB,CAAd;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiD;AAAEG,IAAAA,KAAF;AAASG,IAAAA,QAAQ,EAAE;AAAnB,GAAjD;AACA,SAAO;AAAEH,IAAAA,KAAF;AAASG,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD,C,CAKD;AACA;;AACA,SAASC,IAAT,CAAe;AAACZ,EAAAA;AAAD,CAAf,EAA2B;AACzB,sBAAQ,QAAC,QAAD;AAAU,IAAA,IAAI,EAAEA;AAAhB;AAAA;AAAA;AAAA;AAAA,UAAR;AACD;;AAED,eAAeY,IAAf","sourcesContent":["import React from \"react\";\r\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\r\nimport BlogPost from \"../../components/BlogPost.jsx\";\r\nimport Blog from \"../../components/blog.jsx\";\r\n\r\n\r\n//! REMOVE THIS LINE LATER\r\nprocess.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0;\r\n\r\n\r\n// #########################################################################################\r\n// #########################################################################################\r\nconst client = new ApolloClient({\r\n  uri: process.env.REACT_APP_GRAPH_API,\r\n  cache: new InMemoryCache()\r\n});\r\n\r\n\r\n// #########################################################################################\r\n// #########################################################################################\r\nexport async function getStaticProps( {params} ) {\r\n  //destructure response to data obj, response data from apollo will be in data prop.\r\n  //so destructuring should be for 2 layers\r\n  //GraphQL query format - ( { query: *query*, variables: {} } ). Response will be if a form of - {data: {posts: [{post}, {post}]}}\r\n  //but with only 1 item in the array - {data: {posts: [{post}]}}, so to get the final object 3 layers must be destructured..\r\n  const graphQuery = gql`\r\n    query GetSingleProjectQuery($slug: String) { \r\n      projects(where: {slug: $slug}) {\r\n        slug\r\n        title\r\n        excerpt\r\n        tags\r\n        content {\r\n          html\r\n        }\r\n      }\r\n    } \r\n  `;\r\n \r\n  const { data: { projects: [project] } } = await client.query(\r\n    {query: graphQuery, variables: {slug: params.slug}}\r\n  );\r\n\r\n  console.log(\"PORFTOLIO SLUG DATA #### \", project);\r\n\r\n  return { props: {project} }\r\n}\r\n\r\n// #########################################################################################\r\n// #########################################################################################\r\n// This function gets called at build time\r\nexport async function getStaticPaths() {\r\n  const { data: {projects} } = await client.query(\r\n    {query: gql`{projects { slug } }`}\r\n  );\r\n\r\n  const paths = projects.map(item => ({params: {slug: item.slug}}));\r\n  console.log(\"PORTFOLIO From getStaticPath ### \", { paths, fallback: false } )\r\n  return { paths, fallback: false }\r\n}\r\n\r\n\r\n\r\n\r\n// #########################################################################################\r\n// #########################################################################################\r\nfunction Post( {project} ) {\r\n  return  <BlogPost post={project} />\r\n}\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}