{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\tarasenko_ag\\\\Desktop\\\\blog\\\\MyBlog\\\\frontNextJs\\\\pages\\\\snippets\\\\[slug].js\";\nimport React from \"react\";\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\nimport Snippet from \"../../components/Snippet.jsx\"; //! REMOVE THIS LINE LATER\n\nprocess.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0; // #########################################################################################\n// #########################################################################################\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_GRAPH_API,\n  cache: new InMemoryCache()\n}); // #########################################################################################\n// #########################################################################################\n// This function gets called at build time\n\nexport async function getStaticPaths() {\n  const {\n    data: {\n      snippets\n    }\n  } = await client.query({\n    query: gql`{snippets { slug } }`\n  });\n  const paths = snippets.map(item => ({\n    params: {\n      slug: item.slug\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n} // #########################################################################################\n// #########################################################################################\n\nexport async function getStaticProps({\n  params\n}) {\n  //destructure response to data obj, response data from apollo will be in data prop.\n  //so destructuring should be for 2 layers\n  //GraphQL query format - ( { query: *query*, variables: {} } ). Response will be if a form of - {data: {posts: [{post}, {post}]}}\n  //but with only 1 item in the array - {data: {posts: [{post}]}}, so to get the final object 3 layers must be destructured..\n  const graphQuery = gql`\n    query GetSinglePostQuery($slug: String) { \n        snippets(where: {slug: $slug}) {\n            title\n            excerpt\n            slug\n            tags\n            content{\n              html\n            }\n            repo\n            example\n        }\n    } \n  `;\n  const {\n    data: {\n      snippets: [snippet]\n    }\n  } = await client.query({\n    query: graphQuery,\n    variables: {\n      slug: params.slug\n    }\n  });\n  console.log(\"SNIPPET SINGLE SLUG DATA #### \", snippet);\n  return {\n    props: {\n      snippet\n    }\n  };\n} // ##################################################\n// getStaticProps({params}) {\n//     //destructure response to data obj, response data from apollo will be in data prop.\n//     //so destructuring should be for 2 layers\n//     //GraphQL query format - ( { query: *query*, variables: {} } ). Response will be if a form of - {data: {posts: [{post}, {post}]}}\n//     //but with only 1 item in the array - {data: {posts: [{post}]}}, so to get the final object 3 layers must be destructured..\n//     const graphQuery = gql`\n//       query GetSinglePostQuery($slug: String) { \n//         posts(where: {slug: $slug}) {\n//           slug\n//           title\n//           date\n//           excerpt\n//           content {\n//             text\n//             raw\n//             markdown\n//             html\n//           }\n//             coverImage {\n//               url\n//             }\n//         }\n//       } \n//     `;\n//     const { data: { posts: [post] } } = await client.query(\n//       {query: graphQuery, variables: {slug: params.slug}}\n//     );\n//     return { props: {post} }\n//   }\n// #########################################################################################\n// #########################################################################################\n// This function gets called at build time\n// export async function getStaticPaths() {\n//   const { data: {posts} } = await client.query(\n//     {query: gql`{posts { slug } }`}\n//   );\n//   const paths = posts.map(item => ({params: {slug: item.slug}}));\n//   return { paths, fallback: false }\n// }\n// #########################################################################################\n// #########################################################################################\n\nfunction Post({\n  snippet\n}) {\n  console.log(\"SNIPPET >\", snippet);\n  return /*#__PURE__*/_jsxDEV(Snippet, {\n    snippet: snippet\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 7\n  }, this);\n}\n\nexport default Post;","map":{"version":3,"sources":["C:/Users/tarasenko_ag/Desktop/blog/MyBlog/frontNextJs/pages/snippets/[slug].js"],"names":["React","ApolloClient","InMemoryCache","gql","Snippet","process","env","client","uri","REACT_APP_GRAPH_API","cache","getStaticPaths","data","snippets","query","paths","map","item","params","slug","fallback","getStaticProps","graphQuery","snippet","variables","console","log","props","Post"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,GAAtC,QAAiD,gBAAjD;AACA,OAAOC,OAAP,MAAoB,8BAApB,C,CAEA;;AACAC,OAAO,CAACC,GAAR,CAAY,8BAAZ,IAA8C,CAA9C,C,CAGA;AACA;;AACA,MAAMC,MAAM,GAAG,IAAIN,YAAJ,CAAiB;AAC9BO,EAAAA,GAAG,EAAEH,OAAO,CAACC,GAAR,CAAYG,mBADa;AAE9BC,EAAAA,KAAK,EAAE,IAAIR,aAAJ;AAFuB,CAAjB,CAAf,C,CAMA;AACA;AACA;;AACA,OAAO,eAAeS,cAAf,GAAgC;AACnC,QAAM;AAAEC,IAAAA,IAAI,EAAE;AAACC,MAAAA;AAAD;AAAR,MAAuB,MAAMN,MAAM,CAACO,KAAP,CACjC;AAACA,IAAAA,KAAK,EAAEX,GAAI;AAAZ,GADiC,CAAnC;AAIA,QAAMY,KAAK,GAAGF,QAAQ,CAACG,GAAT,CAAaC,IAAI,KAAK;AAACC,IAAAA,MAAM,EAAE;AAACC,MAAAA,IAAI,EAAEF,IAAI,CAACE;AAAZ;AAAT,GAAL,CAAjB,CAAd;AACA,SAAO;AAAEJ,IAAAA,KAAF;AAASK,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD,C,CAEH;AACA;;AACA,OAAO,eAAeC,cAAf,CAA+B;AAACH,EAAAA;AAAD,CAA/B,EAA0C;AAC/C;AACA;AACA;AACA;AACA,QAAMI,UAAU,GAAGnB,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAdE;AAgBA,QAAM;AAAES,IAAAA,IAAI,EAAE;AAAEC,MAAAA,QAAQ,EAAE,CAACU,OAAD;AAAZ;AAAR,MAAoC,MAAMhB,MAAM,CAACO,KAAP,CAC9C;AAACA,IAAAA,KAAK,EAAEQ,UAAR;AAAoBE,IAAAA,SAAS,EAAE;AAACL,MAAAA,IAAI,EAAED,MAAM,CAACC;AAAd;AAA/B,GAD8C,CAAhD;AAIAM,EAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CH,OAA9C;AAEA,SAAO;AAAEI,IAAAA,KAAK,EAAE;AAACJ,MAAAA;AAAD;AAAT,GAAP;AACD,C,CAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEE;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIF;AACA;;AACA,SAASK,IAAT,CAAe;AAACL,EAAAA;AAAD,CAAf,EAA2B;AACvBE,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,OAAzB;AAEA,sBACE,QAAC,OAAD;AAAS,IAAA,OAAO,EAAEA;AAAlB;AAAA;AAAA;AAAA;AAAA,UADF;AAGH;;AAED,eAAeK,IAAf","sourcesContent":["import React from \"react\";\r\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\r\nimport Snippet from \"../../components/Snippet.jsx\"\r\n\r\n//! REMOVE THIS LINE LATER\r\nprocess.env['NODE_TLS_REJECT_UNAUTHORIZED'] = 0;\r\n\r\n\r\n// #########################################################################################\r\n// #########################################################################################\r\nconst client = new ApolloClient({\r\n  uri: process.env.REACT_APP_GRAPH_API,\r\n  cache: new InMemoryCache()\r\n});\r\n\r\n\r\n// #########################################################################################\r\n// #########################################################################################\r\n// This function gets called at build time\r\nexport async function getStaticPaths() {\r\n    const { data: {snippets} } = await client.query(\r\n      {query: gql`{snippets { slug } }`}\r\n    );\r\n  \r\n    const paths = snippets.map(item => ({params: {slug: item.slug}}));\r\n    return { paths, fallback: false }\r\n  }\r\n\r\n// #########################################################################################\r\n// #########################################################################################\r\nexport async function getStaticProps( {params} ) {\r\n  //destructure response to data obj, response data from apollo will be in data prop.\r\n  //so destructuring should be for 2 layers\r\n  //GraphQL query format - ( { query: *query*, variables: {} } ). Response will be if a form of - {data: {posts: [{post}, {post}]}}\r\n  //but with only 1 item in the array - {data: {posts: [{post}]}}, so to get the final object 3 layers must be destructured..\r\n  const graphQuery = gql`\r\n    query GetSinglePostQuery($slug: String) { \r\n        snippets(where: {slug: $slug}) {\r\n            title\r\n            excerpt\r\n            slug\r\n            tags\r\n            content{\r\n              html\r\n            }\r\n            repo\r\n            example\r\n        }\r\n    } \r\n  `;\r\n \r\n  const { data: { snippets: [snippet] } } = await client.query(\r\n    {query: graphQuery, variables: {slug: params.slug}}\r\n  );\r\n\r\n  console.log(\"SNIPPET SINGLE SLUG DATA #### \", snippet);\r\n\r\n  return { props: {snippet} }\r\n}\r\n\r\n\r\n// ##################################################\r\n// getStaticProps({params}) {\r\n//     //destructure response to data obj, response data from apollo will be in data prop.\r\n//     //so destructuring should be for 2 layers\r\n//     //GraphQL query format - ( { query: *query*, variables: {} } ). Response will be if a form of - {data: {posts: [{post}, {post}]}}\r\n//     //but with only 1 item in the array - {data: {posts: [{post}]}}, so to get the final object 3 layers must be destructured..\r\n//     const graphQuery = gql`\r\n//       query GetSinglePostQuery($slug: String) { \r\n//         posts(where: {slug: $slug}) {\r\n//           slug\r\n//           title\r\n//           date\r\n//           excerpt\r\n//           content {\r\n//             text\r\n//             raw\r\n//             markdown\r\n//             html\r\n//           }\r\n//             coverImage {\r\n//               url\r\n//             }\r\n//         }\r\n//       } \r\n//     `;\r\n   \r\n//     const { data: { posts: [post] } } = await client.query(\r\n//       {query: graphQuery, variables: {slug: params.slug}}\r\n//     );\r\n  \r\n//     return { props: {post} }\r\n//   }\r\n  \r\n  // #########################################################################################\r\n  // #########################################################################################\r\n  // This function gets called at build time\r\n  // export async function getStaticPaths() {\r\n  //   const { data: {posts} } = await client.query(\r\n  //     {query: gql`{posts { slug } }`}\r\n  //   );\r\n  \r\n  //   const paths = posts.map(item => ({params: {slug: item.slug}}));\r\n  //   return { paths, fallback: false }\r\n  // }\r\n\r\n\r\n\r\n// #########################################################################################\r\n// #########################################################################################\r\nfunction Post( {snippet} ) {\r\n    console.log(\"SNIPPET >\", snippet);\r\n\r\n    return  (\r\n      <Snippet snippet={snippet} />\r\n    );\r\n}\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}