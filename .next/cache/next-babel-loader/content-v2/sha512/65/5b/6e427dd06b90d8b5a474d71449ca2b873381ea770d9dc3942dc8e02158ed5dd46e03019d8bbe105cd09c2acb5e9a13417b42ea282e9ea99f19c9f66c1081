{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useReducer, useState } from \"react\";\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\nimport Layout from '../../components/Layout.jsx';\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'; // ###############################################################\n// ###############################################################\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_GRAPH_API,\n  cache: new InMemoryCache()\n}); // ###############################################################\n// ###############################################################\n// This function gets called at build time\n\nexport async function getStaticProps() {\n  //destructure response to data obj\n  const {\n    data: {\n      snippets\n    }\n  } = await client.query({\n    query: gql`{ \n            snippets {\n                title\n                slug\n                tags\n                excerpt\n                createdAt\n              } \n        }`\n  }); //collecting all possible tags for snippets to pass them as default value\n\n  let tagsArray = [];\n  snippets.forEach(snippet => snippet.tags.forEach(tag => !tagsArray.includes(tag) && tagsArray.push(tag)));\n  let newArr = [];\n  tagsArray.forEach(item => newArr.push({\n    tag: item,\n    isActive: true,\n    isSelected: false\n  }));\n  const initialContent = {\n    snippets: snippets,\n    filter: newArr,\n    allTags: tagsArray,\n    defaultFilter: newArr\n  };\n  return {\n    props: initialContent\n  };\n}\nconst ACTIONS = {\n  ADD_FILTER: 'add',\n  REMOVE_FILTER: 'remove'\n};\n\nfunction reducer(content, action) {\n  const {\n    tag,\n    filter,\n    snippets\n  } = content;\n  console.log(\"reducer state\", content);\n  console.log(\"reducer action\", action);\n  let isFirstFilter = true;\n\n  function testFilters() {\n    content.filter.forEach(tag => {\n      if (!tag.isActive) {\n        isFirstFilter = false;\n      }\n    });\n  }\n\n  function getSnippetsTags(array) {\n    let tagsArray = []; //just tags\n\n    array.forEach(snippet => snippet.tags.forEach(tag => !tagsArray.includes(tag) && tagsArray.push(tag)));\n    const disabledFilter = content.filter.map(item => _objectSpread(_objectSpread({}, item), {}, {\n      isActive: false\n    }));\n    const updatedFilter = disabledFilter.map(item => {\n      if (tagsArray.includes(item.tag)) {\n        return _objectSpread(_objectSpread({}, item), {}, {\n          isActive: true\n        });\n      } else {\n        return item;\n      }\n    });\n    console.group('Reducer - get snippets tags');\n    console.log(\"Initial array: \", array);\n    console.log(\"Tags filtered \", tagsArray);\n    console.log(\"Disabled array: \", disabledFilter);\n    console.log(\"Updated array: \", updatedFilter);\n    console.groupEnd(); // let newArr = []; //tag objets\n    // tagsArray.forEach(item => newArr.push({tag: item, isActive: true, isSelected: false}));\n\n    return updatedFilter;\n  } //###1st test- Adding or removing filter\n\n\n  if (!action.button.classList.contains(\"selected\")) {\n    //no class - ADDING\n    //###2 test 1st lvl or 2+\n    testFilters();\n    action.button.classList.add(\"selected\");\n\n    if (isFirstFilter) {\n      //filter snippets to a [tag] - newSnippets-1 (could be not new array but resulting after filtering for selected)\n      console.log(\"Reducer - value:\", action.button.value);\n      const newSnippets = content.snippets.filter(item => item.tags.includes(action.button.value));\n      console.log(\"Reducer - FILTERING Snippets result:\", newSnippets); //get all tags from newSnippets-1 and update TAGS \n\n      let newFilter = getSnippetsTags(newSnippets); // res => half tags active, 1 selected\n\n      console.log(\"Reducer result test: \", _objectSpread(_objectSpread({}, content), {}, {\n        snippets: newSnippets\n      }));\n      return _objectSpread(_objectSpread({}, content), {}, {\n        snippets: newSnippets,\n        filter: newFilter\n      });\n    } else {\n      //set target tag isSelected\n      const newSnippets = content.snippets.filter.filter(item => item.tags.includes(action.button.value)); // filter newSnippets-1 (or just snippets) to [TAG1, TAG2] with func\n      // (could be not new array but resulting after filtering for selected)\n      // get all tags from newSnippets (could be just 1 snippet already) and Update tags\n      // res => 2 selecetd tags and a few active\n    }\n  } else {// with class - REMOVING\n      //2 test 1st lvl or 2+\n      // if TAGS(item has item.isSelected = 1) - NO - them 1st\n      //get default snippets to render\n      //reset TAGS - all to isActive and notSelected\n      //res => all to defaults\n      // if TAGS(item has item.isSelected 2+ ) - them 2nd+\n      //set target tag isSelected=false - \n      //update tags array\n      //filter snippets with new TAGS array by selected\n      //update TAGS from snippets and set needed to isActive\n      //res => TAGS with -1 selected, half active\n    } // switch (action.type) {\n  //     case ACTIONS.ADD_FILTER: {//or just a string\n  //         //test \n  //         return null\n  //     }\n  //     case ACTIONS.REMOVE_FILTER:{ //or just a string\n  //         return null;\n  //     }\n  //     default:\n  //     return content;\n  // }\n\n} // ###############################################################npm\n// ###############################################################\n\n\nfunction Index({\n  snippets,\n  filter,\n  allTags,\n  defaultFilter\n}) {\n  // const [snippetsArray, setSnippetsArray] = useState(snippets);\n  // const [filter, setFilter] = useState(allTags)\n  const {\n    0: content,\n    1: dispatch\n  } = useReducer(reducer, {\n    snippets,\n    filter,\n    allTags,\n    defaultFilter\n  }); //dispatch({ type: ACTIONS.INCREMENT or a string, payload: {var} })\n  //types through global variable - ACTIONS.INCREMENT\n\n  console.log(\"SNIPPETS > \", content.snippets);\n  console.log(\"FILTER > \", content.filter); // console.log(\"ALL TAGS PROPS DATA > \", allTags);\n  // console.log(\"DEF FILTER PROPS DATA > \", defaultFilter);\n\n  function sortByTag(e) {\n    console.log(\"###########################################################################\");\n    console.log(\"###########################################################################\");\n    console.group('Init sorting');\n    console.log(\"On Click # Snippets pressed\", e.target.value);\n    console.log(\"On Click # Snippets arr\", e.target.classList);\n    console.log(\"On click # event\", e.target);\n    console.groupEnd();\n    let filterValue = [];\n\n    if (e.target.classList.contains(\"selected\")) {\n      //DEACTIVATING FILTER\n      console.group('Deactivating...');\n      e.target.classList.remove(\"selected\"); //test whether filter had 1 tag or more\n\n      if (filter.length = 1) {\n        //resetting filter to default\n        console.group('Deselecting tag');\n        console.log(\"Removing last filter (filter length):\", filter.length);\n        setFilter(tags);\n        console.log(\"Resetting default filter (length):\", filter.length);\n        console.groupEnd();\n      } else {\n        //remove tag from filter\n        console.log(\"At least 2 filters, removing selected (init filterss, remove tag):\", filter, e.target.value);\n        setFilter(prevValue => prevValue.filter(tag != e.target.value));\n        console.log(\"New filter value:\", filter);\n        console.groupEnd();\n      }\n    } else if (!e.target.classList.contains(\"selected\")) {\n      //ACTIVATING FILTER\n      console.group('Activating...');\n      e.target.classList.add(\"selected\"); //test whether filter was default or not\n\n      if (filter === tags) {\n        console.log(\"Filters are equal (tags, filter):\", tags.length, filter.length); //remove all filter data if filter=tags, add 1 selected\n        //rerender snippets\n\n        console.log(\"Updating filter, should be 1 item only\");\n        setFilter([e.target.value]);\n        console.log(\"New filter value:\", filter);\n        console.groupEnd();\n      } else {\n        console.log(\"Filters are NOT equal (tags, filter):\", tags.length, filter.length);\n        setFilter(prevValue => [...prevValue, e.target.value]);\n        console.log(\"New filter value:\", filter);\n        console.groupEnd();\n      } //reset filter if 1 only was selected\n      //remove selected if 2+ were selected\n      //rerender snippets\n\n    } // const filteredArray = snippetsArray.filter(item => item.tags.includes(e.target.value));\n    // console.log(\"On click # filtered array of snippets: \", filteredArray);\n    // setSnippetsArray(filteredArray);\n\n  }\n\n  function sortByTag2(e) {\n    dispatch({\n      button: e.target\n    });\n  }\n\n  function initTags() {\n    //collecting all possible tags for CURRENT snippets to pass them as default value\n    //allTags - all possible from SSR stage\n    let sortedTags = [];\n    snippetsArray.forEach(snippet => snippet.tags.forEach(tag => !sortedTags.includes(tag) && sortedTags.push(tag))); // console.log(\"ARR\", tagsArray.map(tag => { return {tag: tag, isActive: true}}))\n\n    let newSortedArr = [];\n    sortedTags.forEach(item => newSortedArr.push({\n      tag: item,\n      state: true\n    }));\n    setFilter(newSortedArr);\n  }\n\n  function sortSnippets(e) {\n    console.log(\"click\", e.target); //const targetTagStatus = ((filter.find(item => item.tag === e.target.value).state));\n\n    const updatedFilter = filter.map(obj => obj.tag === e.target.value ? _objectSpread(_objectSpread({}, obj), {}, {\n      state: !obj.state\n    }) : obj);\n    console.log(updatedFilter);\n    initTags();\n    setFilter(updatedFilter);\n  }\n\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: /*#__PURE__*/_jsx(Layout, {\n      children: /*#__PURE__*/_jsx(React.Fragment, {\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"flex flex-column mb-6 flex flex-col\",\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: \"px-64\",\n            children: [/*#__PURE__*/_jsx(\"p\", {\n              children: \"Nay whatever way delicate passed of avoid might sing whatever all window concealed. Dissuade whole many age mistress late sentiments held doubt scarcely against invitation answer enable. Visited engage steepest shall beyond subject civilly performed concluded offence farther.\"\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: \"tags-filter flex flex-row mt-6\",\n              children: [/*#__PURE__*/_jsx(\"button\", {\n                className: \"tag px-2 py-1 border mr-2\",\n                children: \"TEST\"\n              }), content.filter.map((obj, index) => {\n                if (obj.isActive) {\n                  return /*#__PURE__*/_jsx(\"button\", {\n                    className: \"tag px-2 py-1 border mr-2\",\n                    onClick: sortByTag2,\n                    value: obj.tag,\n                    children: obj.tag\n                  }, index);\n                } else {\n                  return /*#__PURE__*/_jsx(\"button\", {\n                    disabled: true,\n                    className: \"tag px-2 py-1 border mr-2 deactivated\",\n                    onClick: sortByTag2,\n                    value: obj.tag,\n                    children: obj.tag\n                  }, index);\n                }\n              })]\n            })]\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"pt-8 flex flex-row flex-wrap items-stretch\",\n            children: content.snippets.map(snippet => /*#__PURE__*/_jsx(_Fragment, {\n              children: /*#__PURE__*/_jsx(\"div\", {\n                className: \"p-2 flex-shring-0 w-1/4 flex\",\n                children: /*#__PURE__*/_jsxs(\"div\", {\n                  className: \"bg-gray-200 p-3\",\n                  children: [/*#__PURE__*/_jsx(\"h2\", {\n                    className: \"pb-2 text-lg leading-5\",\n                    children: /*#__PURE__*/_jsx(\"a\", {\n                      href: `snippets/${snippet.slug}`,\n                      children: snippet.title\n                    })\n                  }), /*#__PURE__*/_jsx(\"p\", {\n                    className: \"text-sm leading-4\",\n                    children: snippet.excerpt\n                  }), /*#__PURE__*/_jsx(\"span\", {\n                    className: \"snippet-tags flex flex-row pt-2 flex-wrap\",\n                    children: snippet.tags.map(tag => /*#__PURE__*/_jsx(\"p\", {\n                      className: \"snippet-tag text-sm flex-shrink-0\",\n                      children: tag\n                    }))\n                  })]\n                })\n              }, snippet.id)\n            }))\n          })]\n        })\n      })\n    })\n  });\n}\n\nexport default Index;","map":null,"metadata":{},"sourceType":"module"}