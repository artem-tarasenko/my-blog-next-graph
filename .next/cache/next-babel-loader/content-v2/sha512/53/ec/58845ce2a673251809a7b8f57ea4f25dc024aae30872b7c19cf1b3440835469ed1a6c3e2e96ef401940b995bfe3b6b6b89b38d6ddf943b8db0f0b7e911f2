{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\tarasenko_ag\\\\Desktop\\\\blog\\\\MyBlog\\\\frontNextJs\\\\pages\\\\posts\\\\[slug].js\";\nimport { useRouter } from 'next/router';\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client'; //import client from '../../client';\n\nfunction Post(props) {\n  // const router = useRouter()\n  // console.log(\"SLUG > \", router.query.slug);\n  console.log(props);\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"TEXT\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 10\n  }, this); // const {title = \"\", body = [], slug = {}, url = {}, mainImage = {}} = props;\n  // console.log(\"Destructuring: title\", title, \"body \", body, \"slug \", slug, \"main image \", mainImage);\n  // return (\n  //   <article>\n  //     {mainImage && (\n  //       <div>\n  //         <img\n  //           src={urlFor(mainImage)\n  //             .width(600).url()\n  //             }\n  //         />\n  //       </div>\n  //     )}\n  //     <h1>{props.title}</h1>\n  //     <BlockContent\n  //       blocks={body}\n  //       imageOptions={{ w: 320, h: 240, fit: 'max' }}\n  //       {...client.config()}\n  //     />\n  //   </article>\n  // )\n} // ===============================\n// Post.getInitialProps = async function(context) {\n//   console.log(\"Context\", context);\n//   // It's important to default the slug so that it doesn't return \"undefined\"\n//   const { slug = \"\" } = context.query\n//   return await client.fetch(`\n//     *[_type == \"post\" && slug.current == $slug][0]\n//   `, { slug })\n// }\n// This function gets called at build time\n// export async function getStaticProps(context) {\n//   console.log(\"CONTEXT FOR POST > \", context);\n//   // const client = new ApolloClient({\n//   //     uri: process.env.REACT_APP_GRAPH_API,\n//   //     cache: new InMemoryCache()\n//   // });\n//   // //destructure response to data obj\n//   // const { data } = await client.query({\n//   //     query: gql`{ \n//   //       posts(where: {id: \"ckadrfuu000pe0148kels2b5e\"}) {\n//   //         id\n//   //         title\n//   //       }\n//   //     }`\n//   // });\n//   //check what we got from API in console (server-side render fetching)\n//   //response would be - posts []\n//   //console.log(\"QUERY DATA, \", data); \n//   //return props to main component as an object {posts: response.posts}\n//   // return { props: {posts: data.posts} }\n//   return {}\n// }\n// export async function getStaticPaths() {\n//   return {\n//     paths: [\n//       { params: { ... } } // See the \"paths\" section below\n//     ],\n//     fallback: true or false // See the \"fallback\" section below\n//   };\n// }\n// #########################################################################################\n// #########################################################################################\n// #########################################################################################\n// #########################################################################################\n// This function gets called at build time\n\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  // const res = await fetch('https://.../posts')\n  // const posts = await res.json()\n  const client = new ApolloClient({\n    uri: process.env.REACT_APP_GRAPH_API,\n    cache: new InMemoryCache()\n  });\n  const posts = await client.query({\n    query: gql`\n    { \n      posts {\n          slug\n        }\n    }\n  `\n  });\n  const postsSlugs = posts.data.posts;\n  const paths = postsSlugs.map(itemSlug => {\n    params: {\n      slug: itemSlug;\n    }\n  });\n  console.log(\"POSTS SLUGS VAR > \", postsSlugs);\n  console.log(\"PATHS VAR > \", paths); // Get the paths we want to pre-render based on posts\n  // const paths = posts.map((post) => ({\n  //   params: { id: post.id },\n  // }))\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n} // This also gets called at build time\n// export async function getStaticProps({ params }) {\n//   // params contains the post `id`.\n//   // If the route is like /posts/1, then params.id is 1\n//   const res = await fetch(`https://.../posts/${params.id}`)\n//   const post = await res.json()\n//   // Pass post data to the page via props\n//   return { : { post } }\n// }\n// #########################################################################################\n// #########################################################################################\n//This function gets called at build time\n\nexport async function getStaticProps({\n  params: {\n    slug\n  }\n}) {\n  const client = new ApolloClient({\n    uri: process.env.REACT_APP_GRAPH_API,\n    cache: new InMemoryCache()\n  }); //destructure response to data obj\n\n  const {\n    data\n  } = await client.query({\n    query: gql`{ \n          posts {\n              tags\n              id\n              title\n              slug\n              coverImage {\n                url\n              }\n              excerpt\n              content {\n                html\n                markdown\n                text\n              }\n              date\n            } \n      }`\n  });\n  console.log(\"Get static props DATA > \", data);\n  console.log(\"Get static props SLUG > \", slug); //check what we got from API in console (server-side render fetching)\n  //response would be - posts []\n  //console.log(\"QUERY DATA, \", data); \n  //return props to main component as an object {posts: response.posts}\n\n  return {\n    props: {\n      posts: data.posts\n    }\n  };\n}\nexport default Post;","map":{"version":3,"sources":["C:/Users/tarasenko_ag/Desktop/blog/MyBlog/frontNextJs/pages/posts/[slug].js"],"names":["useRouter","ApolloClient","InMemoryCache","gql","Post","props","console","log","getStaticPaths","client","uri","process","env","REACT_APP_GRAPH_API","cache","posts","query","postsSlugs","data","paths","map","itemSlug","params","slug","fallback","getStaticProps"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,GAAtC,QAAiD,gBAAjD,C,CACA;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACnB;AACA;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP,CALmB,CASnB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,C,CAED;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAGA;;;AACA,OAAO,eAAeG,cAAf,GAAgC;AACrC;AACY;AACA;AAEZ,QAAMC,MAAM,GAAG,IAAIR,YAAJ,CAAiB;AAC9BS,IAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,mBADa;AAE9BC,IAAAA,KAAK,EAAE,IAAIZ,aAAJ;AAFuB,GAAjB,CAAf;AAKA,QAAMa,KAAK,GAAG,MAAMN,MAAM,CAACO,KAAP,CAAa;AAC/BA,IAAAA,KAAK,EAAEb,GAAI;AACf;AACA;AACA;AACA;AACA;AACA;AAPmC,GAAb,CAApB;AAWA,QAAMc,UAAU,GAAGF,KAAK,CAACG,IAAN,CAAWH,KAA9B;AACA,QAAMI,KAAK,GAAGF,UAAU,CAACG,GAAX,CAAeC,QAAQ,IAAI;AAACC,IAAAA,MAAM,EAAE;AAACC,MAAAA,IAAI,EAAEF,QAAQ;AAAC;AAAC,GAArD,CAAd;AAEAf,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCU,UAAlC;AACAX,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BY,KAA5B,EAzBqC,CA4BrC;AACY;AACA;AACA;AAEZ;AACA;;AACA,SAAO;AAAEA,IAAAA,KAAF;AAASK,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AAED,C,CAED;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAKA;AACA;AACA;;AACA,OAAO,eAAeC,cAAf,CAA8B;AAACH,EAAAA,MAAM,EAAE;AAACC,IAAAA;AAAD;AAAT,CAA9B,EAAgD;AAErD,QAAMd,MAAM,GAAG,IAAIR,YAAJ,CAAiB;AAC5BS,IAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC,mBADW;AAE5BC,IAAAA,KAAK,EAAE,IAAIZ,aAAJ;AAFqB,GAAjB,CAAf,CAFqD,CAOrD;;AACA,QAAM;AAAEgB,IAAAA;AAAF,MAAW,MAAMT,MAAM,CAACO,KAAP,CAAa;AAChCA,IAAAA,KAAK,EAAEb,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBsC,GAAb,CAAvB;AAqBAG,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCW,IAAxC;AACAZ,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCgB,IAAxC,EA9BqD,CAgCrD;AACA;AACA;AAEA;;AACA,SAAO;AAAElB,IAAAA,KAAK,EAAE;AAACU,MAAAA,KAAK,EAAEG,IAAI,CAACH;AAAb;AAAT,GAAP;AACD;AAGD,eAAeX,IAAf","sourcesContent":["import { useRouter } from 'next/router';\r\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\r\n//import client from '../../client';\r\n\r\nfunction Post(props) {\r\n  // const router = useRouter()\r\n  // console.log(\"SLUG > \", router.query.slug);\r\n\r\n  console.log(props);\r\n  return <p>TEXT</p>\r\n\r\n\r\n\r\n  // const {title = \"\", body = [], slug = {}, url = {}, mainImage = {}} = props;\r\n  // console.log(\"Destructuring: title\", title, \"body \", body, \"slug \", slug, \"main image \", mainImage);\r\n\r\n  // return (\r\n  //   <article>\r\n  //     {mainImage && (\r\n  //       <div>\r\n  //         <img\r\n  //           src={urlFor(mainImage)\r\n  //             .width(600).url()\r\n  //             }\r\n  //         />\r\n  //       </div>\r\n  //     )}\r\n  //     <h1>{props.title}</h1>\r\n  //     <BlockContent\r\n  //       blocks={body}\r\n  //       imageOptions={{ w: 320, h: 240, fit: 'max' }}\r\n  //       {...client.config()}\r\n  //     />\r\n  //   </article>\r\n  // )\r\n}\r\n\r\n// ===============================\r\n\r\n// Post.getInitialProps = async function(context) {\r\n//   console.log(\"Context\", context);\r\n//   // It's important to default the slug so that it doesn't return \"undefined\"\r\n//   const { slug = \"\" } = context.query\r\n//   return await client.fetch(`\r\n//     *[_type == \"post\" && slug.current == $slug][0]\r\n//   `, { slug })\r\n// }\r\n\r\n\r\n// This function gets called at build time\r\n// export async function getStaticProps(context) {\r\n\r\n//   console.log(\"CONTEXT FOR POST > \", context);\r\n\r\n//   // const client = new ApolloClient({\r\n//   //     uri: process.env.REACT_APP_GRAPH_API,\r\n//   //     cache: new InMemoryCache()\r\n//   // });\r\n\r\n//   // //destructure response to data obj\r\n//   // const { data } = await client.query({\r\n//   //     query: gql`{ \r\n//   //       posts(where: {id: \"ckadrfuu000pe0148kels2b5e\"}) {\r\n//   //         id\r\n//   //         title\r\n//   //       }\r\n//   //     }`\r\n//   // });\r\n\r\n//   //check what we got from API in console (server-side render fetching)\r\n//   //response would be - posts []\r\n//   //console.log(\"QUERY DATA, \", data); \r\n  \r\n//   //return props to main component as an object {posts: response.posts}\r\n//   // return { props: {posts: data.posts} }\r\n//   return {}\r\n// }\r\n\r\n// export async function getStaticPaths() {\r\n//   return {\r\n//     paths: [\r\n//       { params: { ... } } // See the \"paths\" section below\r\n//     ],\r\n//     fallback: true or false // See the \"fallback\" section below\r\n//   };\r\n// }\r\n\r\n\r\n\r\n\r\n// #########################################################################################\r\n// #########################################################################################\r\n// #########################################################################################\r\n// #########################################################################################\r\n\r\n\r\n// This function gets called at build time\r\nexport async function getStaticPaths() {\r\n  // Call an external API endpoint to get posts\r\n              // const res = await fetch('https://.../posts')\r\n              // const posts = await res.json()\r\n\r\n  const client = new ApolloClient({\r\n    uri: process.env.REACT_APP_GRAPH_API,\r\n    cache: new InMemoryCache()\r\n  });\r\n\r\n  const posts = await client.query({\r\n    query: gql`\r\n    { \r\n      posts {\r\n          slug\r\n        }\r\n    }\r\n  `\r\n  });\r\n\r\n\r\n  const postsSlugs = posts.data.posts;\r\n  const paths = postsSlugs.map(itemSlug => {params: {slug: itemSlug}});\r\n\r\n  console.log(\"POSTS SLUGS VAR > \", postsSlugs);\r\n  console.log(\"PATHS VAR > \", paths);\r\n\r\n\r\n  // Get the paths we want to pre-render based on posts\r\n              // const paths = posts.map((post) => ({\r\n              //   params: { id: post.id },\r\n              // }))\r\n\r\n  // We'll pre-render only these paths at build time.\r\n  // { fallback: false } means other routes should 404.\r\n  return { paths, fallback: false }\r\n\r\n}\r\n\r\n// This also gets called at build time\r\n// export async function getStaticProps({ params }) {\r\n//   // params contains the post `id`.\r\n//   // If the route is like /posts/1, then params.id is 1\r\n//   const res = await fetch(`https://.../posts/${params.id}`)\r\n//   const post = await res.json()\r\n\r\n\r\n\r\n//   // Pass post data to the page via props\r\n//   return { : { post } }\r\n// }\r\n\r\n\r\n\r\n\r\n// #########################################################################################\r\n// #########################################################################################\r\n//This function gets called at build time\r\nexport async function getStaticProps({params: {slug}}) {\r\n\r\n  const client = new ApolloClient({\r\n      uri: process.env.REACT_APP_GRAPH_API,\r\n      cache: new InMemoryCache()\r\n  });\r\n\r\n  //destructure response to data obj\r\n  const { data } = await client.query({\r\n      query: gql`{ \r\n          posts {\r\n              tags\r\n              id\r\n              title\r\n              slug\r\n              coverImage {\r\n                url\r\n              }\r\n              excerpt\r\n              content {\r\n                html\r\n                markdown\r\n                text\r\n              }\r\n              date\r\n            } \r\n      }`\r\n  });\r\n\r\n  console.log(\"Get static props DATA > \", data);\r\n  console.log(\"Get static props SLUG > \", slug);\r\n\r\n  //check what we got from API in console (server-side render fetching)\r\n  //response would be - posts []\r\n  //console.log(\"QUERY DATA, \", data); \r\n  \r\n  //return props to main component as an object {posts: response.posts}\r\n  return { props: {posts: data.posts} }\r\n}\r\n\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}